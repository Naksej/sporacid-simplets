#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18331
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sporacid.Simplets.Webapp.Core.Security.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SIMPLETS")]
	public partial class SecurityDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertRoleTemplateModuleClaim(RoleTemplateModuleClaim instance);
    partial void UpdateRoleTemplateModuleClaim(RoleTemplateModuleClaim instance);
    partial void DeleteRoleTemplateModuleClaim(RoleTemplateModuleClaim instance);
    partial void InsertClaim(Claim instance);
    partial void UpdateClaim(Claim instance);
    partial void DeleteClaim(Claim instance);
    partial void InsertModule(Module instance);
    partial void UpdateModule(Module instance);
    partial void DeleteModule(Module instance);
    partial void InsertPrincipalAudit(PrincipalAudit instance);
    partial void UpdatePrincipalAudit(PrincipalAudit instance);
    partial void DeletePrincipalAudit(PrincipalAudit instance);
    partial void InsertPrincipal(Principal instance);
    partial void UpdatePrincipal(Principal instance);
    partial void DeletePrincipal(Principal instance);
    partial void InsertPrincipalResourceClaim(PrincipalResourceClaim instance);
    partial void UpdatePrincipalResourceClaim(PrincipalResourceClaim instance);
    partial void DeletePrincipalResourceClaim(PrincipalResourceClaim instance);
    partial void InsertResource(Resource instance);
    partial void UpdateResource(Resource instance);
    partial void DeleteResource(Resource instance);
    partial void InsertResourceRequiredClaim(ResourceRequiredClaim instance);
    partial void UpdateResourceRequiredClaim(ResourceRequiredClaim instance);
    partial void DeleteResourceRequiredClaim(ResourceRequiredClaim instance);
    partial void InsertRoleTemplate(RoleTemplate instance);
    partial void UpdateRoleTemplate(RoleTemplate instance);
    partial void DeleteRoleTemplate(RoleTemplate instance);
    #endregion
		
		public SecurityDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SecurityDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SecurityDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public SecurityDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<RoleTemplateModuleClaim> RoleTemplateModuleClaims
		{
			get
			{
				return this.GetTable<RoleTemplateModuleClaim>();
			}
		}
		
		public System.Data.Linq.Table<Claim> Claims
		{
			get
			{
				return this.GetTable<Claim>();
			}
		}
		
		public System.Data.Linq.Table<Module> Modules
		{
			get
			{
				return this.GetTable<Module>();
			}
		}
		
		public System.Data.Linq.Table<PrincipalAudit> PrincipalAudits
		{
			get
			{
				return this.GetTable<PrincipalAudit>();
			}
		}
		
		public System.Data.Linq.Table<Principal> Principals
		{
			get
			{
				return this.GetTable<Principal>();
			}
		}
		
		public System.Data.Linq.Table<PrincipalResourceClaim> PrincipalResourceClaims
		{
			get
			{
				return this.GetTable<PrincipalResourceClaim>();
			}
		}
		
		public System.Data.Linq.Table<Resource> Resources
		{
			get
			{
				return this.GetTable<Resource>();
			}
		}
		
		public System.Data.Linq.Table<ResourceRequiredClaim> ResourceRequiredClaims
		{
			get
			{
				return this.GetTable<ResourceRequiredClaim>();
			}
		}
		
		public System.Data.Linq.Table<RoleTemplate> RoleTemplates
		{
			get
			{
				return this.GetTable<RoleTemplate>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="security.RoleTemplatesModulesClaims")]
	public partial class RoleTemplateModuleClaim : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _RoleTemplateId;
		
		private int _ModuleId;
		
		private int _ClaimId;
		
		private EntityRef<Claim> _Claim;
		
		private EntityRef<Module> _Module;
		
		private EntityRef<RoleTemplate> _RoleTemplate;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnRoleTemplateIdChanging(int value);
    partial void OnRoleTemplateIdChanged();
    partial void OnModuleIdChanging(int value);
    partial void OnModuleIdChanged();
    partial void OnClaimIdChanging(int value);
    partial void OnClaimIdChanged();
    #endregion
		
		public RoleTemplateModuleClaim()
		{
			this._Claim = default(EntityRef<Claim>);
			this._Module = default(EntityRef<Module>);
			this._RoleTemplate = default(EntityRef<RoleTemplate>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RoleTemplateId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int RoleTemplateId
		{
			get
			{
				return this._RoleTemplateId;
			}
			set
			{
				if ((this._RoleTemplateId != value))
				{
					if (this._RoleTemplate.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnRoleTemplateIdChanging(value);
					this.SendPropertyChanging();
					this._RoleTemplateId = value;
					this.SendPropertyChanged("RoleTemplateId");
					this.OnRoleTemplateIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModuleId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ModuleId
		{
			get
			{
				return this._ModuleId;
			}
			set
			{
				if ((this._ModuleId != value))
				{
					if (this._Module.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModuleIdChanging(value);
					this.SendPropertyChanging();
					this._ModuleId = value;
					this.SendPropertyChanged("ModuleId");
					this.OnModuleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ClaimId
		{
			get
			{
				return this._ClaimId;
			}
			set
			{
				if ((this._ClaimId != value))
				{
					if (this._Claim.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClaimIdChanging(value);
					this.SendPropertyChanging();
					this._ClaimId = value;
					this.SendPropertyChanged("ClaimId");
					this.OnClaimIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Claim_RoleTemplateModuleClaim", Storage="_Claim", ThisKey="ClaimId", OtherKey="Id", IsForeignKey=true)]
		public Claim Claim
		{
			get
			{
				return this._Claim.Entity;
			}
			set
			{
				Claim previousValue = this._Claim.Entity;
				if (((previousValue != value) 
							|| (this._Claim.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Claim.Entity = null;
						previousValue.RoleTemplateModuleClaims.Remove(this);
					}
					this._Claim.Entity = value;
					if ((value != null))
					{
						value.RoleTemplateModuleClaims.Add(this);
						this._ClaimId = value.Id;
					}
					else
					{
						this._ClaimId = default(int);
					}
					this.SendPropertyChanged("Claim");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Module_RoleTemplateModuleClaim", Storage="_Module", ThisKey="ModuleId", OtherKey="Id", IsForeignKey=true)]
		public Module Module
		{
			get
			{
				return this._Module.Entity;
			}
			set
			{
				Module previousValue = this._Module.Entity;
				if (((previousValue != value) 
							|| (this._Module.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Module.Entity = null;
						previousValue.RoleTemplateModuleClaims.Remove(this);
					}
					this._Module.Entity = value;
					if ((value != null))
					{
						value.RoleTemplateModuleClaims.Add(this);
						this._ModuleId = value.Id;
					}
					else
					{
						this._ModuleId = default(int);
					}
					this.SendPropertyChanged("Module");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoleTemplate_RoleTemplateModuleClaim", Storage="_RoleTemplate", ThisKey="RoleTemplateId", OtherKey="Id", IsForeignKey=true)]
		public RoleTemplate RoleTemplate
		{
			get
			{
				return this._RoleTemplate.Entity;
			}
			set
			{
				RoleTemplate previousValue = this._RoleTemplate.Entity;
				if (((previousValue != value) 
							|| (this._RoleTemplate.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._RoleTemplate.Entity = null;
						previousValue.RoleTemplateModuleClaims.Remove(this);
					}
					this._RoleTemplate.Entity = value;
					if ((value != null))
					{
						value.RoleTemplateModuleClaims.Add(this);
						this._RoleTemplateId = value.Id;
					}
					else
					{
						this._RoleTemplateId = default(int);
					}
					this.SendPropertyChanged("RoleTemplate");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="security.Claims")]
	public partial class Claim : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<RoleTemplateModuleClaim> _RoleTemplateModuleClaims;
		
		private EntitySet<PrincipalResourceClaim> _PrincipalResourceClaims;
		
		private EntitySet<ResourceRequiredClaim> _ResourceRequiredClaims;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Claim()
		{
			this._RoleTemplateModuleClaims = new EntitySet<RoleTemplateModuleClaim>(new Action<RoleTemplateModuleClaim>(this.attach_RoleTemplateModuleClaims), new Action<RoleTemplateModuleClaim>(this.detach_RoleTemplateModuleClaims));
			this._PrincipalResourceClaims = new EntitySet<PrincipalResourceClaim>(new Action<PrincipalResourceClaim>(this.attach_PrincipalResourceClaims), new Action<PrincipalResourceClaim>(this.detach_PrincipalResourceClaims));
			this._ResourceRequiredClaims = new EntitySet<ResourceRequiredClaim>(new Action<ResourceRequiredClaim>(this.attach_ResourceRequiredClaims), new Action<ResourceRequiredClaim>(this.detach_ResourceRequiredClaims));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Claim_RoleTemplateModuleClaim", Storage="_RoleTemplateModuleClaims", ThisKey="Id", OtherKey="ClaimId")]
		public EntitySet<RoleTemplateModuleClaim> RoleTemplateModuleClaims
		{
			get
			{
				return this._RoleTemplateModuleClaims;
			}
			set
			{
				this._RoleTemplateModuleClaims.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Claim_PrincipalResourceClaim", Storage="_PrincipalResourceClaims", ThisKey="Id", OtherKey="ClaimId")]
		public EntitySet<PrincipalResourceClaim> PrincipalResourceClaims
		{
			get
			{
				return this._PrincipalResourceClaims;
			}
			set
			{
				this._PrincipalResourceClaims.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Claim_ResourceRequiredClaim", Storage="_ResourceRequiredClaims", ThisKey="Id", OtherKey="ClaimId")]
		public EntitySet<ResourceRequiredClaim> ResourceRequiredClaims
		{
			get
			{
				return this._ResourceRequiredClaims;
			}
			set
			{
				this._ResourceRequiredClaims.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RoleTemplateModuleClaims(RoleTemplateModuleClaim entity)
		{
			this.SendPropertyChanging();
			entity.Claim = this;
		}
		
		private void detach_RoleTemplateModuleClaims(RoleTemplateModuleClaim entity)
		{
			this.SendPropertyChanging();
			entity.Claim = null;
		}
		
		private void attach_PrincipalResourceClaims(PrincipalResourceClaim entity)
		{
			this.SendPropertyChanging();
			entity.Claim = this;
		}
		
		private void detach_PrincipalResourceClaims(PrincipalResourceClaim entity)
		{
			this.SendPropertyChanging();
			entity.Claim = null;
		}
		
		private void attach_ResourceRequiredClaims(ResourceRequiredClaim entity)
		{
			this.SendPropertyChanging();
			entity.Claim = this;
		}
		
		private void detach_ResourceRequiredClaims(ResourceRequiredClaim entity)
		{
			this.SendPropertyChanging();
			entity.Claim = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="security.Modules")]
	public partial class Module : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<RoleTemplateModuleClaim> _RoleTemplateModuleClaims;
		
		private EntitySet<Resource> _Resources;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public Module()
		{
			this._RoleTemplateModuleClaims = new EntitySet<RoleTemplateModuleClaim>(new Action<RoleTemplateModuleClaim>(this.attach_RoleTemplateModuleClaims), new Action<RoleTemplateModuleClaim>(this.detach_RoleTemplateModuleClaims));
			this._Resources = new EntitySet<Resource>(new Action<Resource>(this.attach_Resources), new Action<Resource>(this.detach_Resources));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Module_RoleTemplateModuleClaim", Storage="_RoleTemplateModuleClaims", ThisKey="Id", OtherKey="ModuleId")]
		public EntitySet<RoleTemplateModuleClaim> RoleTemplateModuleClaims
		{
			get
			{
				return this._RoleTemplateModuleClaims;
			}
			set
			{
				this._RoleTemplateModuleClaims.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Module_Resource", Storage="_Resources", ThisKey="Id", OtherKey="ModuleId")]
		public EntitySet<Resource> Resources
		{
			get
			{
				return this._Resources;
			}
			set
			{
				this._Resources.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RoleTemplateModuleClaims(RoleTemplateModuleClaim entity)
		{
			this.SendPropertyChanging();
			entity.Module = this;
		}
		
		private void detach_RoleTemplateModuleClaims(RoleTemplateModuleClaim entity)
		{
			this.SendPropertyChanging();
			entity.Module = null;
		}
		
		private void attach_Resources(Resource entity)
		{
			this.SendPropertyChanging();
			entity.Module = this;
		}
		
		private void detach_Resources(Resource entity)
		{
			this.SendPropertyChanging();
			entity.Module = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="security.PrincipalAudit")]
	public partial class PrincipalAudit : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private long _Id;
		
		private int _PrincipalId;
		
		private string _IpAddress;
		
		private System.DateTime _Date;
		
		private EntityRef<Principal> _Principal;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(long value);
    partial void OnIdChanged();
    partial void OnPrincipalIdChanging(int value);
    partial void OnPrincipalIdChanged();
    partial void OnIpAddressChanging(string value);
    partial void OnIpAddressChanged();
    partial void OnDateChanging(System.DateTime value);
    partial void OnDateChanged();
    #endregion
		
		public PrincipalAudit()
		{
			this._Principal = default(EntityRef<Principal>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="BigInt NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public long Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrincipalId", DbType="Int NOT NULL")]
		public int PrincipalId
		{
			get
			{
				return this._PrincipalId;
			}
			set
			{
				if ((this._PrincipalId != value))
				{
					if (this._Principal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrincipalIdChanging(value);
					this.SendPropertyChanging();
					this._PrincipalId = value;
					this.SendPropertyChanged("PrincipalId");
					this.OnPrincipalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_IpAddress", DbType="VarChar(15) NOT NULL", CanBeNull=false)]
		public string IpAddress
		{
			get
			{
				return this._IpAddress;
			}
			set
			{
				if ((this._IpAddress != value))
				{
					this.OnIpAddressChanging(value);
					this.SendPropertyChanging();
					this._IpAddress = value;
					this.SendPropertyChanged("IpAddress");
					this.OnIpAddressChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Date", DbType="DateTime NOT NULL")]
		public System.DateTime Date
		{
			get
			{
				return this._Date;
			}
			set
			{
				if ((this._Date != value))
				{
					this.OnDateChanging(value);
					this.SendPropertyChanging();
					this._Date = value;
					this.SendPropertyChanged("Date");
					this.OnDateChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Principal_PrincipalAudit", Storage="_Principal", ThisKey="PrincipalId", OtherKey="Id", IsForeignKey=true)]
		public Principal Principal
		{
			get
			{
				return this._Principal.Entity;
			}
			set
			{
				Principal previousValue = this._Principal.Entity;
				if (((previousValue != value) 
							|| (this._Principal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Principal.Entity = null;
						previousValue.PrincipalAudits.Remove(this);
					}
					this._Principal.Entity = value;
					if ((value != null))
					{
						value.PrincipalAudits.Add(this);
						this._PrincipalId = value.Id;
					}
					else
					{
						this._PrincipalId = default(int);
					}
					this.SendPropertyChanged("Principal");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="security.Principals")]
	public partial class Principal : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Identity;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<PrincipalAudit> _PrincipalAudits;
		
		private EntitySet<PrincipalResourceClaim> _PrincipalResourceClaims;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnIdentityChanging(string value);
    partial void OnIdentityChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public Principal()
		{
			this._PrincipalAudits = new EntitySet<PrincipalAudit>(new Action<PrincipalAudit>(this.attach_PrincipalAudits), new Action<PrincipalAudit>(this.detach_PrincipalAudits));
			this._PrincipalResourceClaims = new EntitySet<PrincipalResourceClaim>(new Action<PrincipalResourceClaim>(this.attach_PrincipalResourceClaims), new Action<PrincipalResourceClaim>(this.detach_PrincipalResourceClaims));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Identity]", Storage="_Identity", DbType="VarChar(25) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		public string Identity
		{
			get
			{
				return this._Identity;
			}
			set
			{
				if ((this._Identity != value))
				{
					this.OnIdentityChanging(value);
					this.SendPropertyChanging();
					this._Identity = value;
					this.SendPropertyChanged("Identity");
					this.OnIdentityChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Principal_PrincipalAudit", Storage="_PrincipalAudits", ThisKey="Id", OtherKey="PrincipalId")]
		public EntitySet<PrincipalAudit> PrincipalAudits
		{
			get
			{
				return this._PrincipalAudits;
			}
			set
			{
				this._PrincipalAudits.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Principal_PrincipalResourceClaim", Storage="_PrincipalResourceClaims", ThisKey="Id", OtherKey="PrincipalId")]
		public EntitySet<PrincipalResourceClaim> PrincipalResourceClaims
		{
			get
			{
				return this._PrincipalResourceClaims;
			}
			set
			{
				this._PrincipalResourceClaims.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PrincipalAudits(PrincipalAudit entity)
		{
			this.SendPropertyChanging();
			entity.Principal = this;
		}
		
		private void detach_PrincipalAudits(PrincipalAudit entity)
		{
			this.SendPropertyChanging();
			entity.Principal = null;
		}
		
		private void attach_PrincipalResourceClaims(PrincipalResourceClaim entity)
		{
			this.SendPropertyChanging();
			entity.Principal = this;
		}
		
		private void detach_PrincipalResourceClaims(PrincipalResourceClaim entity)
		{
			this.SendPropertyChanging();
			entity.Principal = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="security.PrincipalsResourcesClaims")]
	public partial class PrincipalResourceClaim : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _PrincipalId;
		
		private int _ResourceId;
		
		private int _ClaimId;
		
		private EntityRef<Claim> _Claim;
		
		private EntityRef<Principal> _Principal;
		
		private EntityRef<Resource> _Resource;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnPrincipalIdChanging(int value);
    partial void OnPrincipalIdChanged();
    partial void OnResourceIdChanging(int value);
    partial void OnResourceIdChanged();
    partial void OnClaimIdChanging(int value);
    partial void OnClaimIdChanged();
    #endregion
		
		public PrincipalResourceClaim()
		{
			this._Claim = default(EntityRef<Claim>);
			this._Principal = default(EntityRef<Principal>);
			this._Resource = default(EntityRef<Resource>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PrincipalId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int PrincipalId
		{
			get
			{
				return this._PrincipalId;
			}
			set
			{
				if ((this._PrincipalId != value))
				{
					if (this._Principal.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnPrincipalIdChanging(value);
					this.SendPropertyChanging();
					this._PrincipalId = value;
					this.SendPropertyChanged("PrincipalId");
					this.OnPrincipalIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ResourceId
		{
			get
			{
				return this._ResourceId;
			}
			set
			{
				if ((this._ResourceId != value))
				{
					if (this._Resource.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResourceIdChanging(value);
					this.SendPropertyChanging();
					this._ResourceId = value;
					this.SendPropertyChanged("ResourceId");
					this.OnResourceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ClaimId
		{
			get
			{
				return this._ClaimId;
			}
			set
			{
				if ((this._ClaimId != value))
				{
					if (this._Claim.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClaimIdChanging(value);
					this.SendPropertyChanging();
					this._ClaimId = value;
					this.SendPropertyChanged("ClaimId");
					this.OnClaimIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Claim_PrincipalResourceClaim", Storage="_Claim", ThisKey="ClaimId", OtherKey="Id", IsForeignKey=true)]
		public Claim Claim
		{
			get
			{
				return this._Claim.Entity;
			}
			set
			{
				Claim previousValue = this._Claim.Entity;
				if (((previousValue != value) 
							|| (this._Claim.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Claim.Entity = null;
						previousValue.PrincipalResourceClaims.Remove(this);
					}
					this._Claim.Entity = value;
					if ((value != null))
					{
						value.PrincipalResourceClaims.Add(this);
						this._ClaimId = value.Id;
					}
					else
					{
						this._ClaimId = default(int);
					}
					this.SendPropertyChanged("Claim");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Principal_PrincipalResourceClaim", Storage="_Principal", ThisKey="PrincipalId", OtherKey="Id", IsForeignKey=true)]
		public Principal Principal
		{
			get
			{
				return this._Principal.Entity;
			}
			set
			{
				Principal previousValue = this._Principal.Entity;
				if (((previousValue != value) 
							|| (this._Principal.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Principal.Entity = null;
						previousValue.PrincipalResourceClaims.Remove(this);
					}
					this._Principal.Entity = value;
					if ((value != null))
					{
						value.PrincipalResourceClaims.Add(this);
						this._PrincipalId = value.Id;
					}
					else
					{
						this._PrincipalId = default(int);
					}
					this.SendPropertyChanged("Principal");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Resource_PrincipalResourceClaim", Storage="_Resource", ThisKey="ResourceId", OtherKey="Id", IsForeignKey=true)]
		public Resource Resource
		{
			get
			{
				return this._Resource.Entity;
			}
			set
			{
				Resource previousValue = this._Resource.Entity;
				if (((previousValue != value) 
							|| (this._Resource.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Resource.Entity = null;
						previousValue.PrincipalResourceClaims.Remove(this);
					}
					this._Resource.Entity = value;
					if ((value != null))
					{
						value.PrincipalResourceClaims.Add(this);
						this._ResourceId = value.Id;
					}
					else
					{
						this._ResourceId = default(int);
					}
					this.SendPropertyChanged("Resource");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="security.Resources")]
	public partial class Resource : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ModuleId;
		
		private string _Name;
		
		private string _BaseUrl;
		
		private EntitySet<PrincipalResourceClaim> _PrincipalResourceClaims;
		
		private EntitySet<ResourceRequiredClaim> _ResourceRequiredClaims;
		
		private EntityRef<Module> _Module;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnModuleIdChanging(int value);
    partial void OnModuleIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnBaseUrlChanging(string value);
    partial void OnBaseUrlChanged();
    #endregion
		
		public Resource()
		{
			this._PrincipalResourceClaims = new EntitySet<PrincipalResourceClaim>(new Action<PrincipalResourceClaim>(this.attach_PrincipalResourceClaims), new Action<PrincipalResourceClaim>(this.detach_PrincipalResourceClaims));
			this._ResourceRequiredClaims = new EntitySet<ResourceRequiredClaim>(new Action<ResourceRequiredClaim>(this.attach_ResourceRequiredClaims), new Action<ResourceRequiredClaim>(this.detach_ResourceRequiredClaims));
			this._Module = default(EntityRef<Module>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ModuleId", DbType="Int NOT NULL")]
		public int ModuleId
		{
			get
			{
				return this._ModuleId;
			}
			set
			{
				if ((this._ModuleId != value))
				{
					if (this._Module.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnModuleIdChanging(value);
					this.SendPropertyChanging();
					this._ModuleId = value;
					this.SendPropertyChanged("ModuleId");
					this.OnModuleIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_BaseUrl", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		public string BaseUrl
		{
			get
			{
				return this._BaseUrl;
			}
			set
			{
				if ((this._BaseUrl != value))
				{
					this.OnBaseUrlChanging(value);
					this.SendPropertyChanging();
					this._BaseUrl = value;
					this.SendPropertyChanged("BaseUrl");
					this.OnBaseUrlChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Resource_PrincipalResourceClaim", Storage="_PrincipalResourceClaims", ThisKey="Id", OtherKey="ResourceId")]
		public EntitySet<PrincipalResourceClaim> PrincipalResourceClaims
		{
			get
			{
				return this._PrincipalResourceClaims;
			}
			set
			{
				this._PrincipalResourceClaims.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Resource_ResourceRequiredClaim", Storage="_ResourceRequiredClaims", ThisKey="Id", OtherKey="ResourceId")]
		public EntitySet<ResourceRequiredClaim> ResourceRequiredClaims
		{
			get
			{
				return this._ResourceRequiredClaims;
			}
			set
			{
				this._ResourceRequiredClaims.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Module_Resource", Storage="_Module", ThisKey="ModuleId", OtherKey="Id", IsForeignKey=true)]
		public Module Module
		{
			get
			{
				return this._Module.Entity;
			}
			set
			{
				Module previousValue = this._Module.Entity;
				if (((previousValue != value) 
							|| (this._Module.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Module.Entity = null;
						previousValue.Resources.Remove(this);
					}
					this._Module.Entity = value;
					if ((value != null))
					{
						value.Resources.Add(this);
						this._ModuleId = value.Id;
					}
					else
					{
						this._ModuleId = default(int);
					}
					this.SendPropertyChanged("Module");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_PrincipalResourceClaims(PrincipalResourceClaim entity)
		{
			this.SendPropertyChanging();
			entity.Resource = this;
		}
		
		private void detach_PrincipalResourceClaims(PrincipalResourceClaim entity)
		{
			this.SendPropertyChanging();
			entity.Resource = null;
		}
		
		private void attach_ResourceRequiredClaims(ResourceRequiredClaim entity)
		{
			this.SendPropertyChanging();
			entity.Resource = this;
		}
		
		private void detach_ResourceRequiredClaims(ResourceRequiredClaim entity)
		{
			this.SendPropertyChanging();
			entity.Resource = null;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="security.ResourcesRequiredClaims")]
	public partial class ResourceRequiredClaim : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ResourceId;
		
		private int _ClaimId;
		
		private EntityRef<Claim> _Claim;
		
		private EntityRef<Resource> _Resource;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnResourceIdChanging(int value);
    partial void OnResourceIdChanged();
    partial void OnClaimIdChanging(int value);
    partial void OnClaimIdChanged();
    #endregion
		
		public ResourceRequiredClaim()
		{
			this._Claim = default(EntityRef<Claim>);
			this._Resource = default(EntityRef<Resource>);
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ResourceId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ResourceId
		{
			get
			{
				return this._ResourceId;
			}
			set
			{
				if ((this._ResourceId != value))
				{
					if (this._Resource.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnResourceIdChanging(value);
					this.SendPropertyChanging();
					this._ResourceId = value;
					this.SendPropertyChanged("ResourceId");
					this.OnResourceIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClaimId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		public int ClaimId
		{
			get
			{
				return this._ClaimId;
			}
			set
			{
				if ((this._ClaimId != value))
				{
					if (this._Claim.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClaimIdChanging(value);
					this.SendPropertyChanging();
					this._ClaimId = value;
					this.SendPropertyChanged("ClaimId");
					this.OnClaimIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Claim_ResourceRequiredClaim", Storage="_Claim", ThisKey="ClaimId", OtherKey="Id", IsForeignKey=true)]
		public Claim Claim
		{
			get
			{
				return this._Claim.Entity;
			}
			set
			{
				Claim previousValue = this._Claim.Entity;
				if (((previousValue != value) 
							|| (this._Claim.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Claim.Entity = null;
						previousValue.ResourceRequiredClaims.Remove(this);
					}
					this._Claim.Entity = value;
					if ((value != null))
					{
						value.ResourceRequiredClaims.Add(this);
						this._ClaimId = value.Id;
					}
					else
					{
						this._ClaimId = default(int);
					}
					this.SendPropertyChanged("Claim");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Resource_ResourceRequiredClaim", Storage="_Resource", ThisKey="ResourceId", OtherKey="Id", IsForeignKey=true)]
		public Resource Resource
		{
			get
			{
				return this._Resource.Entity;
			}
			set
			{
				Resource previousValue = this._Resource.Entity;
				if (((previousValue != value) 
							|| (this._Resource.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Resource.Entity = null;
						previousValue.ResourceRequiredClaims.Remove(this);
					}
					this._Resource.Entity = value;
					if ((value != null))
					{
						value.ResourceRequiredClaims.Add(this);
						this._ResourceId = value.Id;
					}
					else
					{
						this._ResourceId = default(int);
					}
					this.SendPropertyChanged("Resource");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="security.RoleTemplates")]
	public partial class RoleTemplate : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Name;
		
		private EntitySet<RoleTemplateModuleClaim> _RoleTemplateModuleClaims;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    #endregion
		
		public RoleTemplate()
		{
			this._RoleTemplateModuleClaims = new EntitySet<RoleTemplateModuleClaim>(new Action<RoleTemplateModuleClaim>(this.attach_RoleTemplateModuleClaims), new Action<RoleTemplateModuleClaim>(this.detach_RoleTemplateModuleClaims));
			OnCreated();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="RoleTemplate_RoleTemplateModuleClaim", Storage="_RoleTemplateModuleClaims", ThisKey="Id", OtherKey="RoleTemplateId")]
		public EntitySet<RoleTemplateModuleClaim> RoleTemplateModuleClaims
		{
			get
			{
				return this._RoleTemplateModuleClaims;
			}
			set
			{
				this._RoleTemplateModuleClaims.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_RoleTemplateModuleClaims(RoleTemplateModuleClaim entity)
		{
			this.SendPropertyChanging();
			entity.RoleTemplate = this;
		}
		
		private void detach_RoleTemplateModuleClaims(RoleTemplateModuleClaim entity)
		{
			this.SendPropertyChanging();
			entity.RoleTemplate = null;
		}
	}
}
#pragma warning restore 1591
