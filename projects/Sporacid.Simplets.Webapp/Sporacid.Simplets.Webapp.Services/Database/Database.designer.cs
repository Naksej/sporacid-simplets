#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18331
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sporacid.Simplets.Webapp.Services.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Runtime.Serialization;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SIMPLETS")]
	public partial class DatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertAdresse(Adresse instance);
    partial void UpdateAdresse(Adresse instance);
    partial void DeleteAdresse(Adresse instance);
    partial void InsertUnite(Unite instance);
    partial void UpdateUnite(Unite instance);
    partial void DeleteUnite(Unite instance);
    partial void InsertAllergie(Allergie instance);
    partial void UpdateAllergie(Allergie instance);
    partial void DeleteAllergie(Allergie instance);
    partial void InsertClub(Club instance);
    partial void UpdateClub(Club instance);
    partial void DeleteClub(Club instance);
    partial void InsertCommandite(Commandite instance);
    partial void UpdateCommandite(Commandite instance);
    partial void DeleteCommandite(Commandite instance);
    partial void InsertConcentration(Concentration instance);
    partial void UpdateConcentration(Concentration instance);
    partial void DeleteConcentration(Concentration instance);
    partial void InsertContactUrgence(ContactUrgence instance);
    partial void UpdateContactUrgence(ContactUrgence instance);
    partial void DeleteContactUrgence(ContactUrgence instance);
    partial void InsertEvenement(Evenement instance);
    partial void UpdateEvenement(Evenement instance);
    partial void DeleteEvenement(Evenement instance);
    partial void InsertFormation(Formation instance);
    partial void UpdateFormation(Formation instance);
    partial void DeleteFormation(Formation instance);
    partial void InsertFournisseur(Fournisseur instance);
    partial void UpdateFournisseur(Fournisseur instance);
    partial void DeleteFournisseur(Fournisseur instance);
    partial void InsertFournisseurItem(FournisseurItem instance);
    partial void UpdateFournisseurItem(FournisseurItem instance);
    partial void DeleteFournisseurItem(FournisseurItem instance);
    partial void InsertItem(Item instance);
    partial void UpdateItem(Item instance);
    partial void DeleteItem(Item instance);
    partial void InsertLienParente(LienParente instance);
    partial void UpdateLienParente(LienParente instance);
    partial void DeleteLienParente(LienParente instance);
    partial void InsertMembrePreference(MembrePreference instance);
    partial void UpdateMembrePreference(MembrePreference instance);
    partial void DeleteMembrePreference(MembrePreference instance);
    partial void InsertMembre(Membre instance);
    partial void UpdateMembre(Membre instance);
    partial void DeleteMembre(Membre instance);
    partial void InsertMembreAllergie(MembreAllergie instance);
    partial void UpdateMembreAllergie(MembreAllergie instance);
    partial void DeleteMembreAllergie(MembreAllergie instance);
    partial void InsertMembreClub(MembreClub instance);
    partial void UpdateMembreClub(MembreClub instance);
    partial void DeleteMembreClub(MembreClub instance);
    partial void InsertMembreFormation(MembreFormation instance);
    partial void UpdateMembreFormation(MembreFormation instance);
    partial void DeleteMembreFormation(MembreFormation instance);
    partial void InsertStatutSuivie(StatutSuivie instance);
    partial void UpdateStatutSuivie(StatutSuivie instance);
    partial void DeleteStatutSuivie(StatutSuivie instance);
    partial void InsertSuivie(Suivie instance);
    partial void UpdateSuivie(Suivie instance);
    partial void DeleteSuivie(Suivie instance);
    #endregion
		
		public DatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Adresse> Adresses
		{
			get
			{
				return this.GetTable<Adresse>();
			}
		}
		
		public System.Data.Linq.Table<Unite> Unites
		{
			get
			{
				return this.GetTable<Unite>();
			}
		}
		
		public System.Data.Linq.Table<Allergie> Allergies
		{
			get
			{
				return this.GetTable<Allergie>();
			}
		}
		
		public System.Data.Linq.Table<Club> Clubs
		{
			get
			{
				return this.GetTable<Club>();
			}
		}
		
		public System.Data.Linq.Table<Commandite> Commandites
		{
			get
			{
				return this.GetTable<Commandite>();
			}
		}
		
		public System.Data.Linq.Table<Concentration> Concentrations
		{
			get
			{
				return this.GetTable<Concentration>();
			}
		}
		
		public System.Data.Linq.Table<ContactUrgence> ContactUrgences
		{
			get
			{
				return this.GetTable<ContactUrgence>();
			}
		}
		
		public System.Data.Linq.Table<Evenement> Evenements
		{
			get
			{
				return this.GetTable<Evenement>();
			}
		}
		
		public System.Data.Linq.Table<Formation> Formations
		{
			get
			{
				return this.GetTable<Formation>();
			}
		}
		
		public System.Data.Linq.Table<Fournisseur> Fournisseurs
		{
			get
			{
				return this.GetTable<Fournisseur>();
			}
		}
		
		public System.Data.Linq.Table<FournisseurItem> FournisseurItems
		{
			get
			{
				return this.GetTable<FournisseurItem>();
			}
		}
		
		public System.Data.Linq.Table<Item> Items
		{
			get
			{
				return this.GetTable<Item>();
			}
		}
		
		public System.Data.Linq.Table<LienParente> LienParentes
		{
			get
			{
				return this.GetTable<LienParente>();
			}
		}
		
		public System.Data.Linq.Table<MembrePreference> MembrePreferences
		{
			get
			{
				return this.GetTable<MembrePreference>();
			}
		}
		
		public System.Data.Linq.Table<Membre> Membres
		{
			get
			{
				return this.GetTable<Membre>();
			}
		}
		
		public System.Data.Linq.Table<MembreAllergie> MembreAllergies
		{
			get
			{
				return this.GetTable<MembreAllergie>();
			}
		}
		
		public System.Data.Linq.Table<MembreClub> MembreClubs
		{
			get
			{
				return this.GetTable<MembreClub>();
			}
		}
		
		public System.Data.Linq.Table<MembreFormation> MembreFormations
		{
			get
			{
				return this.GetTable<MembreFormation>();
			}
		}
		
		public System.Data.Linq.Table<StatutSuivie> StatutSuivies
		{
			get
			{
				return this.GetTable<StatutSuivie>();
			}
		}
		
		public System.Data.Linq.Table<Suivie> Suivies
		{
			get
			{
				return this.GetTable<Suivie>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Adresses")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Adresse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _NoCivique;
		
		private string _Rue;
		
		private string _Appartement;
		
		private string _Ville;
		
		private string _CodePostal;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<Fournisseur> _Fournisseurs;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNoCiviqueChanging(int value);
    partial void OnNoCiviqueChanged();
    partial void OnRueChanging(string value);
    partial void OnRueChanged();
    partial void OnAppartementChanging(string value);
    partial void OnAppartementChanged();
    partial void OnVilleChanging(string value);
    partial void OnVilleChanged();
    partial void OnCodePostalChanging(string value);
    partial void OnCodePostalChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public Adresse()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoCivique", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int NoCivique
		{
			get
			{
				return this._NoCivique;
			}
			set
			{
				if ((this._NoCivique != value))
				{
					this.OnNoCiviqueChanging(value);
					this.SendPropertyChanging();
					this._NoCivique = value;
					this.SendPropertyChanged("NoCivique");
					this.OnNoCiviqueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rue", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Rue
		{
			get
			{
				return this._Rue;
			}
			set
			{
				if ((this._Rue != value))
				{
					this.OnRueChanging(value);
					this.SendPropertyChanging();
					this._Rue = value;
					this.SendPropertyChanged("Rue");
					this.OnRueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Appartement", DbType="VarChar(10)", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string Appartement
		{
			get
			{
				return this._Appartement;
			}
			set
			{
				if ((this._Appartement != value))
				{
					this.OnAppartementChanging(value);
					this.SendPropertyChanging();
					this._Appartement = value;
					this.SendPropertyChanged("Appartement");
					this.OnAppartementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ville", DbType="VarChar(150) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public string Ville
		{
			get
			{
				return this._Ville;
			}
			set
			{
				if ((this._Ville != value))
				{
					this.OnVilleChanging(value);
					this.SendPropertyChanging();
					this._Ville = value;
					this.SendPropertyChanged("Ville");
					this.OnVilleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodePostal", DbType="VarChar(16) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public string CodePostal
		{
			get
			{
				return this._CodePostal;
			}
			set
			{
				if ((this._CodePostal != value))
				{
					this.OnCodePostalChanging(value);
					this.SendPropertyChanging();
					this._CodePostal = value;
					this.SendPropertyChanged("CodePostal");
					this.OnCodePostalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adresse_Fournisseur", Storage="_Fournisseurs", ThisKey="Id", OtherKey="AdresseId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8, EmitDefaultValue=false)]
		public EntitySet<Fournisseur> Fournisseurs
		{
			get
			{
				if ((this.serializing 
							&& (this._Fournisseurs.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Fournisseurs;
			}
			set
			{
				this._Fournisseurs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Fournisseurs(Fournisseur entity)
		{
			this.SendPropertyChanging();
			entity.Adresse = this;
		}
		
		private void detach_Fournisseurs(Fournisseur entity)
		{
			this.SendPropertyChanging();
			entity.Adresse = null;
		}
		
		private void Initialize()
		{
			this._Fournisseurs = new EntitySet<Fournisseur>(new Action<Fournisseur>(this.attach_Fournisseurs), new Action<Fournisseur>(this.detach_Fournisseurs));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Unites")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Unite : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Code;
		
		private string _Systeme;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<Item> _Items;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnSystemeChanging(string value);
    partial void OnSystemeChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public Unite()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="VarChar(10) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Systeme", DbType="VarChar(10) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Systeme
		{
			get
			{
				return this._Systeme;
			}
			set
			{
				if ((this._Systeme != value))
				{
					this.OnSystemeChanging(value);
					this.SendPropertyChanging();
					this._Systeme = value;
					this.SendPropertyChanged("Systeme");
					this.OnSystemeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Unite_Item", Storage="_Items", ThisKey="Id", OtherKey="UniteId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5, EmitDefaultValue=false)]
		public EntitySet<Item> Items
		{
			get
			{
				if ((this.serializing 
							&& (this._Items.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Unite = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Unite = null;
		}
		
		private void Initialize()
		{
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Allergies")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Allergie : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Description;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<MembreAllergie> _MembresAllergies;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public Allergie()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(150) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Allergie_MembreAllergie", Storage="_MembresAllergies", ThisKey="Id", OtherKey="AllergieId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4, EmitDefaultValue=false)]
		public EntitySet<MembreAllergie> MembreAllergies
		{
			get
			{
				if ((this.serializing 
							&& (this._MembresAllergies.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._MembresAllergies;
			}
			set
			{
				this._MembresAllergies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MembresAllergies(MembreAllergie entity)
		{
			this.SendPropertyChanging();
			entity.Allergie = this;
		}
		
		private void detach_MembresAllergies(MembreAllergie entity)
		{
			this.SendPropertyChanging();
			entity.Allergie = null;
		}
		
		private void Initialize()
		{
			this._MembresAllergies = new EntitySet<MembreAllergie>(new Action<MembreAllergie>(this.attach_MembresAllergies), new Action<MembreAllergie>(this.detach_MembresAllergies));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Clubs")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Club : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Nom;
		
		private string _Description;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<Commandite> _Commandites;
		
		private EntitySet<Evenement> _Evenements;
		
		private EntitySet<MembreClub> _MembresClubs;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNomChanging(string value);
    partial void OnNomChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public Club()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nom", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Nom
		{
			get
			{
				return this._Nom;
			}
			set
			{
				if ((this._Nom != value))
				{
					this.OnNomChanging(value);
					this.SendPropertyChanging();
					this._Nom = value;
					this.SendPropertyChanged("Nom");
					this.OnNomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(250)", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Club_Commandite", Storage="_Commandites", ThisKey="Id", OtherKey="ClubId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5, EmitDefaultValue=false)]
		public EntitySet<Commandite> Commandites
		{
			get
			{
				if ((this.serializing 
							&& (this._Commandites.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Commandites;
			}
			set
			{
				this._Commandites.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Club_Evenement", Storage="_Evenements", ThisKey="Id", OtherKey="ClubId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6, EmitDefaultValue=false)]
		public EntitySet<Evenement> Evenements
		{
			get
			{
				if ((this.serializing 
							&& (this._Evenements.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Evenements;
			}
			set
			{
				this._Evenements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Club_MembreClub", Storage="_MembresClubs", ThisKey="Id", OtherKey="ClubId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7, EmitDefaultValue=false)]
		public EntitySet<MembreClub> MembreClubs
		{
			get
			{
				if ((this.serializing 
							&& (this._MembresClubs.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._MembresClubs;
			}
			set
			{
				this._MembresClubs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Commandites(Commandite entity)
		{
			this.SendPropertyChanging();
			entity.Club = this;
		}
		
		private void detach_Commandites(Commandite entity)
		{
			this.SendPropertyChanging();
			entity.Club = null;
		}
		
		private void attach_Evenements(Evenement entity)
		{
			this.SendPropertyChanging();
			entity.Club = this;
		}
		
		private void detach_Evenements(Evenement entity)
		{
			this.SendPropertyChanging();
			entity.Club = null;
		}
		
		private void attach_MembresClubs(MembreClub entity)
		{
			this.SendPropertyChanging();
			entity.Club = this;
		}
		
		private void detach_MembresClubs(MembreClub entity)
		{
			this.SendPropertyChanging();
			entity.Club = null;
		}
		
		private void Initialize()
		{
			this._Commandites = new EntitySet<Commandite>(new Action<Commandite>(this.attach_Commandites), new Action<Commandite>(this.detach_Commandites));
			this._Evenements = new EntitySet<Evenement>(new Action<Evenement>(this.attach_Evenements), new Action<Evenement>(this.detach_Evenements));
			this._MembresClubs = new EntitySet<MembreClub>(new Action<MembreClub>(this.attach_MembresClubs), new Action<MembreClub>(this.detach_MembresClubs));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Commandites")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Commandite : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _FournisseurId;
		
		private int _ItemId;
		
		private int _ClubId;
		
		private decimal _Valeur;
		
		private string _Nature;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<Suivie> _Suivies;
		
		private EntityRef<Club> _Club;
		
		private EntityRef<Fournisseur> _Fournisseur;
		
		private EntityRef<Item> _Item;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnFournisseurIdChanging(int value);
    partial void OnFournisseurIdChanged();
    partial void OnItemIdChanging(int value);
    partial void OnItemIdChanged();
    partial void OnClubIdChanging(int value);
    partial void OnClubIdChanged();
    partial void OnValeurChanging(decimal value);
    partial void OnValeurChanged();
    partial void OnNatureChanging(string value);
    partial void OnNatureChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public Commandite()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FournisseurId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int FournisseurId
		{
			get
			{
				return this._FournisseurId;
			}
			set
			{
				if ((this._FournisseurId != value))
				{
					if (this._Fournisseur.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFournisseurIdChanging(value);
					this.SendPropertyChanging();
					this._FournisseurId = value;
					this.SendPropertyChanged("FournisseurId");
					this.OnFournisseurIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public int ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemIdChanging(value);
					this.SendPropertyChanging();
					this._ItemId = value;
					this.SendPropertyChanged("ItemId");
					this.OnItemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClubId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public int ClubId
		{
			get
			{
				return this._ClubId;
			}
			set
			{
				if ((this._ClubId != value))
				{
					if (this._Club.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClubIdChanging(value);
					this.SendPropertyChanging();
					this._ClubId = value;
					this.SendPropertyChanged("ClubId");
					this.OnClubIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Valeur", DbType="Decimal(6,2) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public decimal Valeur
		{
			get
			{
				return this._Valeur;
			}
			set
			{
				if ((this._Valeur != value))
				{
					this.OnValeurChanging(value);
					this.SendPropertyChanging();
					this._Valeur = value;
					this.SendPropertyChanged("Valeur");
					this.OnValeurChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nature", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public string Nature
		{
			get
			{
				return this._Nature;
			}
			set
			{
				if ((this._Nature != value))
				{
					this.OnNatureChanging(value);
					this.SendPropertyChanging();
					this._Nature = value;
					this.SendPropertyChanged("Nature");
					this.OnNatureChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Commandite_Suivie", Storage="_Suivies", ThisKey="Id", OtherKey="CommanditeId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8, EmitDefaultValue=false)]
		public EntitySet<Suivie> Suivies
		{
			get
			{
				if ((this.serializing 
							&& (this._Suivies.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Suivies;
			}
			set
			{
				this._Suivies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Club_Commandite", Storage="_Club", ThisKey="ClubId", OtherKey="Id", IsForeignKey=true)]
		public Club Club
		{
			get
			{
				return this._Club.Entity;
			}
			set
			{
				Club previousValue = this._Club.Entity;
				if (((previousValue != value) 
							|| (this._Club.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Club.Entity = null;
						previousValue.Commandites.Remove(this);
					}
					this._Club.Entity = value;
					if ((value != null))
					{
						value.Commandites.Add(this);
						this._ClubId = value.Id;
					}
					else
					{
						this._ClubId = default(int);
					}
					this.SendPropertyChanged("Club");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Fournisseur_Commandite", Storage="_Fournisseur", ThisKey="FournisseurId", OtherKey="Id", IsForeignKey=true)]
		public Fournisseur Fournisseur
		{
			get
			{
				return this._Fournisseur.Entity;
			}
			set
			{
				Fournisseur previousValue = this._Fournisseur.Entity;
				if (((previousValue != value) 
							|| (this._Fournisseur.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Fournisseur.Entity = null;
						previousValue.Commandites.Remove(this);
					}
					this._Fournisseur.Entity = value;
					if ((value != null))
					{
						value.Commandites.Add(this);
						this._FournisseurId = value.Id;
					}
					else
					{
						this._FournisseurId = default(int);
					}
					this.SendPropertyChanged("Fournisseur");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Commandite", Storage="_Item", ThisKey="ItemId", OtherKey="Id", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.Commandites.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.Commandites.Add(this);
						this._ItemId = value.Id;
					}
					else
					{
						this._ItemId = default(int);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Suivies(Suivie entity)
		{
			this.SendPropertyChanging();
			entity.Commandite = this;
		}
		
		private void detach_Suivies(Suivie entity)
		{
			this.SendPropertyChanging();
			entity.Commandite = null;
		}
		
		private void Initialize()
		{
			this._Suivies = new EntitySet<Suivie>(new Action<Suivie>(this.attach_Suivies), new Action<Suivie>(this.detach_Suivies));
			this._Club = default(EntityRef<Club>);
			this._Fournisseur = default(EntityRef<Fournisseur>);
			this._Item = default(EntityRef<Item>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Concentrations")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Concentration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Acronyme;
		
		private string _Description;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<Membre> _Membres;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAcronymeChanging(string value);
    partial void OnAcronymeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public Concentration()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Acronyme", DbType="VarChar(10) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Acronyme
		{
			get
			{
				return this._Acronyme;
			}
			set
			{
				if ((this._Acronyme != value))
				{
					this.OnAcronymeChanging(value);
					this.SendPropertyChanging();
					this._Acronyme = value;
					this.SendPropertyChanged("Acronyme");
					this.OnAcronymeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(150)", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concentration_Membre", Storage="_Membres", ThisKey="Id", OtherKey="ConcentrationId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5, EmitDefaultValue=false)]
		public EntitySet<Membre> Membres
		{
			get
			{
				if ((this.serializing 
							&& (this._Membres.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Membres;
			}
			set
			{
				this._Membres.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Membres(Membre entity)
		{
			this.SendPropertyChanging();
			entity.Concentration = this;
		}
		
		private void detach_Membres(Membre entity)
		{
			this.SendPropertyChanging();
			entity.Concentration = null;
		}
		
		private void Initialize()
		{
			this._Membres = new EntitySet<Membre>(new Action<Membre>(this.attach_Membres), new Action<Membre>(this.detach_Membres));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.ContactsUrgence")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class ContactUrgence : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _MembreId;
		
		private int _LienParenteId;
		
		private string _Nom;
		
		private string _Prenom;
		
		private string _Telephone;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<LienParente> _LiensParente;
		
		private EntityRef<Membre> _Membre;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMembreIdChanging(int value);
    partial void OnMembreIdChanged();
    partial void OnLienParenteIdChanging(int value);
    partial void OnLienParenteIdChanged();
    partial void OnNomChanging(string value);
    partial void OnNomChanged();
    partial void OnPrenomChanging(string value);
    partial void OnPrenomChanged();
    partial void OnTelephoneChanging(string value);
    partial void OnTelephoneChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public ContactUrgence()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MembreId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int MembreId
		{
			get
			{
				return this._MembreId;
			}
			set
			{
				if ((this._MembreId != value))
				{
					if (this._Membre.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMembreIdChanging(value);
					this.SendPropertyChanging();
					this._MembreId = value;
					this.SendPropertyChanged("MembreId");
					this.OnMembreIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_LienParenteId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public int LienParenteId
		{
			get
			{
				return this._LienParenteId;
			}
			set
			{
				if ((this._LienParenteId != value))
				{
					if (this._LiensParente.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnLienParenteIdChanging(value);
					this.SendPropertyChanging();
					this._LienParenteId = value;
					this.SendPropertyChanged("LienParenteId");
					this.OnLienParenteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nom", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string Nom
		{
			get
			{
				return this._Nom;
			}
			set
			{
				if ((this._Nom != value))
				{
					this.OnNomChanging(value);
					this.SendPropertyChanging();
					this._Nom = value;
					this.SendPropertyChanged("Nom");
					this.OnNomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prenom", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public string Prenom
		{
			get
			{
				return this._Prenom;
			}
			set
			{
				if ((this._Prenom != value))
				{
					this.OnPrenomChanging(value);
					this.SendPropertyChanging();
					this._Prenom = value;
					this.SendPropertyChanged("Prenom");
					this.OnPrenomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Telephone", DbType="VarChar(20) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public string Telephone
		{
			get
			{
				return this._Telephone;
			}
			set
			{
				if ((this._Telephone != value))
				{
					this.OnTelephoneChanging(value);
					this.SendPropertyChanging();
					this._Telephone = value;
					this.SendPropertyChanged("Telephone");
					this.OnTelephoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LienParente_ContactUrgence", Storage="_LiensParente", ThisKey="LienParenteId", OtherKey="Id", IsForeignKey=true)]
		public LienParente LienParente
		{
			get
			{
				return this._LiensParente.Entity;
			}
			set
			{
				LienParente previousValue = this._LiensParente.Entity;
				if (((previousValue != value) 
							|| (this._LiensParente.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._LiensParente.Entity = null;
						previousValue.ContactUrgences.Remove(this);
					}
					this._LiensParente.Entity = value;
					if ((value != null))
					{
						value.ContactUrgences.Add(this);
						this._LienParenteId = value.Id;
					}
					else
					{
						this._LienParenteId = default(int);
					}
					this.SendPropertyChanged("LienParente");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Membre_ContactUrgence", Storage="_Membre", ThisKey="MembreId", OtherKey="Id", IsForeignKey=true)]
		public Membre Membre
		{
			get
			{
				return this._Membre.Entity;
			}
			set
			{
				Membre previousValue = this._Membre.Entity;
				if (((previousValue != value) 
							|| (this._Membre.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Membre.Entity = null;
						previousValue.ContactUrgences.Remove(this);
					}
					this._Membre.Entity = value;
					if ((value != null))
					{
						value.ContactUrgences.Add(this);
						this._MembreId = value.Id;
					}
					else
					{
						this._MembreId = default(int);
					}
					this.SendPropertyChanged("Membre");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._LiensParente = default(EntityRef<LienParente>);
			this._Membre = default(EntityRef<Membre>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Evenements")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Evenement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ClubId;
		
		private string _Nom;
		
		private string _Description;
		
		private System.DateTime _DateDebut;
		
		private System.Nullable<System.DateTime> _DateFin;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<Club> _Club;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnClubIdChanging(int value);
    partial void OnClubIdChanged();
    partial void OnNomChanging(string value);
    partial void OnNomChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDateDebutChanging(System.DateTime value);
    partial void OnDateDebutChanged();
    partial void OnDateFinChanging(System.Nullable<System.DateTime> value);
    partial void OnDateFinChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public Evenement()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClubId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int ClubId
		{
			get
			{
				return this._ClubId;
			}
			set
			{
				if ((this._ClubId != value))
				{
					if (this._Club.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClubIdChanging(value);
					this.SendPropertyChanging();
					this._ClubId = value;
					this.SendPropertyChanged("ClubId");
					this.OnClubIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nom", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Nom
		{
			get
			{
				return this._Nom;
			}
			set
			{
				if ((this._Nom != value))
				{
					this.OnNomChanging(value);
					this.SendPropertyChanging();
					this._Nom = value;
					this.SendPropertyChanged("Nom");
					this.OnNomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateDebut", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public System.DateTime DateDebut
		{
			get
			{
				return this._DateDebut;
			}
			set
			{
				if ((this._DateDebut != value))
				{
					this.OnDateDebutChanging(value);
					this.SendPropertyChanging();
					this._DateDebut = value;
					this.SendPropertyChanged("DateDebut");
					this.OnDateDebutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateFin", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public System.Nullable<System.DateTime> DateFin
		{
			get
			{
				return this._DateFin;
			}
			set
			{
				if ((this._DateFin != value))
				{
					this.OnDateFinChanging(value);
					this.SendPropertyChanging();
					this._DateFin = value;
					this.SendPropertyChanged("DateFin");
					this.OnDateFinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Club_Evenement", Storage="_Club", ThisKey="ClubId", OtherKey="Id", IsForeignKey=true)]
		public Club Club
		{
			get
			{
				return this._Club.Entity;
			}
			set
			{
				Club previousValue = this._Club.Entity;
				if (((previousValue != value) 
							|| (this._Club.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Club.Entity = null;
						previousValue.Evenements.Remove(this);
					}
					this._Club.Entity = value;
					if ((value != null))
					{
						value.Evenements.Add(this);
						this._ClubId = value.Id;
					}
					else
					{
						this._ClubId = default(int);
					}
					this.SendPropertyChanged("Club");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Club = default(EntityRef<Club>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Formations")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Formation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Titre;
		
		private string _Description;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<MembreFormation> _MembresFormations;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTitreChanging(string value);
    partial void OnTitreChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public Formation()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Titre", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Titre
		{
			get
			{
				return this._Titre;
			}
			set
			{
				if ((this._Titre != value))
				{
					this.OnTitreChanging(value);
					this.SendPropertyChanging();
					this._Titre = value;
					this.SendPropertyChanged("Titre");
					this.OnTitreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(150)", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Formation_MembreFormation", Storage="_MembresFormations", ThisKey="Id", OtherKey="FormationId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5, EmitDefaultValue=false)]
		public EntitySet<MembreFormation> MembreFormations
		{
			get
			{
				if ((this.serializing 
							&& (this._MembresFormations.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._MembresFormations;
			}
			set
			{
				this._MembresFormations.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MembresFormations(MembreFormation entity)
		{
			this.SendPropertyChanging();
			entity.Formation = this;
		}
		
		private void detach_MembresFormations(MembreFormation entity)
		{
			this.SendPropertyChanging();
			entity.Formation = null;
		}
		
		private void Initialize()
		{
			this._MembresFormations = new EntitySet<MembreFormation>(new Action<MembreFormation>(this.attach_MembresFormations), new Action<MembreFormation>(this.detach_MembresFormations));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Fournisseurs")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Fournisseur : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _AdresseId;
		
		private string _Nom;
		
		private string _Contact;
		
		private string _Telephone;
		
		private string _Courriel;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<Commandite> _Commandites;
		
		private EntitySet<FournisseurItem> _FournisseursItems;
		
		private EntityRef<Adresse> _Adress;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAdresseIdChanging(int value);
    partial void OnAdresseIdChanged();
    partial void OnNomChanging(string value);
    partial void OnNomChanged();
    partial void OnContactChanging(string value);
    partial void OnContactChanged();
    partial void OnTelephoneChanging(string value);
    partial void OnTelephoneChanged();
    partial void OnCourrielChanging(string value);
    partial void OnCourrielChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public Fournisseur()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdresseId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int AdresseId
		{
			get
			{
				return this._AdresseId;
			}
			set
			{
				if ((this._AdresseId != value))
				{
					if (this._Adress.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdresseIdChanging(value);
					this.SendPropertyChanging();
					this._AdresseId = value;
					this.SendPropertyChanged("AdresseId");
					this.OnAdresseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nom", DbType="VarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Nom
		{
			get
			{
				return this._Nom;
			}
			set
			{
				if ((this._Nom != value))
				{
					this.OnNomChanging(value);
					this.SendPropertyChanging();
					this._Nom = value;
					this.SendPropertyChanged("Nom");
					this.OnNomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Contact", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string Contact
		{
			get
			{
				return this._Contact;
			}
			set
			{
				if ((this._Contact != value))
				{
					this.OnContactChanging(value);
					this.SendPropertyChanging();
					this._Contact = value;
					this.SendPropertyChanged("Contact");
					this.OnContactChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Telephone", DbType="VarChar(20) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public string Telephone
		{
			get
			{
				return this._Telephone;
			}
			set
			{
				if ((this._Telephone != value))
				{
					this.OnTelephoneChanging(value);
					this.SendPropertyChanging();
					this._Telephone = value;
					this.SendPropertyChanged("Telephone");
					this.OnTelephoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Courriel", DbType="VarChar(250)", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public string Courriel
		{
			get
			{
				return this._Courriel;
			}
			set
			{
				if ((this._Courriel != value))
				{
					this.OnCourrielChanging(value);
					this.SendPropertyChanging();
					this._Courriel = value;
					this.SendPropertyChanged("Courriel");
					this.OnCourrielChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Fournisseur_Commandite", Storage="_Commandites", ThisKey="Id", OtherKey="FournisseurId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8, EmitDefaultValue=false)]
		public EntitySet<Commandite> Commandites
		{
			get
			{
				if ((this.serializing 
							&& (this._Commandites.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Commandites;
			}
			set
			{
				this._Commandites.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Fournisseur_FournisseurItem", Storage="_FournisseursItems", ThisKey="Id", OtherKey="FournisseurId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=9, EmitDefaultValue=false)]
		public EntitySet<FournisseurItem> FournisseurItems
		{
			get
			{
				if ((this.serializing 
							&& (this._FournisseursItems.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._FournisseursItems;
			}
			set
			{
				this._FournisseursItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adresse_Fournisseur", Storage="_Adress", ThisKey="AdresseId", OtherKey="Id", IsForeignKey=true)]
		public Adresse Adresse
		{
			get
			{
				return this._Adress.Entity;
			}
			set
			{
				Adresse previousValue = this._Adress.Entity;
				if (((previousValue != value) 
							|| (this._Adress.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Adress.Entity = null;
						previousValue.Fournisseurs.Remove(this);
					}
					this._Adress.Entity = value;
					if ((value != null))
					{
						value.Fournisseurs.Add(this);
						this._AdresseId = value.Id;
					}
					else
					{
						this._AdresseId = default(int);
					}
					this.SendPropertyChanged("Adresse");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Commandites(Commandite entity)
		{
			this.SendPropertyChanging();
			entity.Fournisseur = this;
		}
		
		private void detach_Commandites(Commandite entity)
		{
			this.SendPropertyChanging();
			entity.Fournisseur = null;
		}
		
		private void attach_FournisseursItems(FournisseurItem entity)
		{
			this.SendPropertyChanging();
			entity.Fournisseur = this;
		}
		
		private void detach_FournisseursItems(FournisseurItem entity)
		{
			this.SendPropertyChanging();
			entity.Fournisseur = null;
		}
		
		private void Initialize()
		{
			this._Commandites = new EntitySet<Commandite>(new Action<Commandite>(this.attach_Commandites), new Action<Commandite>(this.detach_Commandites));
			this._FournisseursItems = new EntitySet<FournisseurItem>(new Action<FournisseurItem>(this.attach_FournisseursItems), new Action<FournisseurItem>(this.detach_FournisseursItems));
			this._Adress = default(EntityRef<Adresse>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.FournisseursItems")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class FournisseurItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FournisseurId;
		
		private int _ItemId;
		
		private string _CodeFournisseur;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<Fournisseur> _Fournisseur;
		
		private EntityRef<Item> _Item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFournisseurIdChanging(int value);
    partial void OnFournisseurIdChanged();
    partial void OnItemIdChanging(int value);
    partial void OnItemIdChanged();
    partial void OnCodeFournisseurChanging(string value);
    partial void OnCodeFournisseurChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public FournisseurItem()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FournisseurId", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int FournisseurId
		{
			get
			{
				return this._FournisseurId;
			}
			set
			{
				if ((this._FournisseurId != value))
				{
					if (this._Fournisseur.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFournisseurIdChanging(value);
					this.SendPropertyChanging();
					this._FournisseurId = value;
					this.SendPropertyChanged("FournisseurId");
					this.OnFournisseurIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemId", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemIdChanging(value);
					this.SendPropertyChanging();
					this._ItemId = value;
					this.SendPropertyChanged("ItemId");
					this.OnItemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodeFournisseur", DbType="VarChar(20) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string CodeFournisseur
		{
			get
			{
				return this._CodeFournisseur;
			}
			set
			{
				if ((this._CodeFournisseur != value))
				{
					this.OnCodeFournisseurChanging(value);
					this.SendPropertyChanging();
					this._CodeFournisseur = value;
					this.SendPropertyChanged("CodeFournisseur");
					this.OnCodeFournisseurChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Fournisseur_FournisseurItem", Storage="_Fournisseur", ThisKey="FournisseurId", OtherKey="Id", IsForeignKey=true)]
		public Fournisseur Fournisseur
		{
			get
			{
				return this._Fournisseur.Entity;
			}
			set
			{
				Fournisseur previousValue = this._Fournisseur.Entity;
				if (((previousValue != value) 
							|| (this._Fournisseur.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Fournisseur.Entity = null;
						previousValue.FournisseurItems.Remove(this);
					}
					this._Fournisseur.Entity = value;
					if ((value != null))
					{
						value.FournisseurItems.Add(this);
						this._FournisseurId = value.Id;
					}
					else
					{
						this._FournisseurId = default(int);
					}
					this.SendPropertyChanged("Fournisseur");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_FournisseurItem", Storage="_Item", ThisKey="ItemId", OtherKey="Id", IsForeignKey=true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.FournisseurItems.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.FournisseurItems.Add(this);
						this._ItemId = value.Id;
					}
					else
					{
						this._ItemId = default(int);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Fournisseur = default(EntityRef<Fournisseur>);
			this._Item = default(EntityRef<Item>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Items")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _UniteId;
		
		private string _Description;
		
		private string _CodeClub;
		
		private decimal _QuantiteCourante;
		
		private System.Nullable<decimal> _QunatiteMin;
		
		private System.Nullable<decimal> _QuantiteMax;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<Commandite> _Commandites;
		
		private EntitySet<FournisseurItem> _FournisseursItems;
		
		private EntityRef<Unite> _Unite;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnUniteIdChanging(int value);
    partial void OnUniteIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnCodeClubChanging(string value);
    partial void OnCodeClubChanged();
    partial void OnQuantiteCouranteChanging(decimal value);
    partial void OnQuantiteCouranteChanged();
    partial void OnQunatiteMinChanging(System.Nullable<decimal> value);
    partial void OnQunatiteMinChanged();
    partial void OnQuantiteMaxChanging(System.Nullable<decimal> value);
    partial void OnQuantiteMaxChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public Item()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UniteId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int UniteId
		{
			get
			{
				return this._UniteId;
			}
			set
			{
				if ((this._UniteId != value))
				{
					if (this._Unite.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUniteIdChanging(value);
					this.SendPropertyChanging();
					this._UniteId = value;
					this.SendPropertyChanged("UniteId");
					this.OnUniteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodeClub", DbType="VarChar(20)", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string CodeClub
		{
			get
			{
				return this._CodeClub;
			}
			set
			{
				if ((this._CodeClub != value))
				{
					this.OnCodeClubChanging(value);
					this.SendPropertyChanging();
					this._CodeClub = value;
					this.SendPropertyChanged("CodeClub");
					this.OnCodeClubChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuantiteCourante", DbType="Decimal(6,3) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public decimal QuantiteCourante
		{
			get
			{
				return this._QuantiteCourante;
			}
			set
			{
				if ((this._QuantiteCourante != value))
				{
					this.OnQuantiteCouranteChanging(value);
					this.SendPropertyChanging();
					this._QuantiteCourante = value;
					this.SendPropertyChanged("QuantiteCourante");
					this.OnQuantiteCouranteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QunatiteMin", DbType="Decimal(6,3)", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public System.Nullable<decimal> QunatiteMin
		{
			get
			{
				return this._QunatiteMin;
			}
			set
			{
				if ((this._QunatiteMin != value))
				{
					this.OnQunatiteMinChanging(value);
					this.SendPropertyChanging();
					this._QunatiteMin = value;
					this.SendPropertyChanged("QunatiteMin");
					this.OnQunatiteMinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuantiteMax", DbType="Decimal(6,3)", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public System.Nullable<decimal> QuantiteMax
		{
			get
			{
				return this._QuantiteMax;
			}
			set
			{
				if ((this._QuantiteMax != value))
				{
					this.OnQuantiteMaxChanging(value);
					this.SendPropertyChanging();
					this._QuantiteMax = value;
					this.SendPropertyChanged("QuantiteMax");
					this.OnQuantiteMaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_Commandite", Storage="_Commandites", ThisKey="Id", OtherKey="ItemId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=9, EmitDefaultValue=false)]
		public EntitySet<Commandite> Commandites
		{
			get
			{
				if ((this.serializing 
							&& (this._Commandites.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Commandites;
			}
			set
			{
				this._Commandites.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_FournisseurItem", Storage="_FournisseursItems", ThisKey="Id", OtherKey="ItemId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=10, EmitDefaultValue=false)]
		public EntitySet<FournisseurItem> FournisseurItems
		{
			get
			{
				if ((this.serializing 
							&& (this._FournisseursItems.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._FournisseursItems;
			}
			set
			{
				this._FournisseursItems.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Unite_Item", Storage="_Unite", ThisKey="UniteId", OtherKey="Id", IsForeignKey=true)]
		public Unite Unite
		{
			get
			{
				return this._Unite.Entity;
			}
			set
			{
				Unite previousValue = this._Unite.Entity;
				if (((previousValue != value) 
							|| (this._Unite.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Unite.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._Unite.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._UniteId = value.Id;
					}
					else
					{
						this._UniteId = default(int);
					}
					this.SendPropertyChanged("Unite");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Commandites(Commandite entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_Commandites(Commandite entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
		
		private void attach_FournisseursItems(FournisseurItem entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_FournisseursItems(FournisseurItem entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
		
		private void Initialize()
		{
			this._Commandites = new EntitySet<Commandite>(new Action<Commandite>(this.attach_Commandites), new Action<Commandite>(this.detach_Commandites));
			this._FournisseursItems = new EntitySet<FournisseurItem>(new Action<FournisseurItem>(this.attach_FournisseursItems), new Action<FournisseurItem>(this.detach_FournisseursItems));
			this._Unite = default(EntityRef<Unite>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.LiensParente")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class LienParente : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Description;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<ContactUrgence> _ContactsUrgences;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public LienParente()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="LienParente_ContactUrgence", Storage="_ContactsUrgences", ThisKey="Id", OtherKey="LienParenteId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4, EmitDefaultValue=false)]
		public EntitySet<ContactUrgence> ContactUrgences
		{
			get
			{
				if ((this.serializing 
							&& (this._ContactsUrgences.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ContactsUrgences;
			}
			set
			{
				this._ContactsUrgences.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContactsUrgences(ContactUrgence entity)
		{
			this.SendPropertyChanging();
			entity.LienParente = this;
		}
		
		private void detach_ContactsUrgences(ContactUrgence entity)
		{
			this.SendPropertyChanging();
			entity.LienParente = null;
		}
		
		private void Initialize()
		{
			this._ContactsUrgences = new EntitySet<ContactUrgence>(new Action<ContactUrgence>(this.attach_ContactsUrgences), new Action<ContactUrgence>(this.detach_ContactsUrgences));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MembrePreferences")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class MembrePreference : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _MembreId;
		
		private string _PreferenceKey;
		
		private string _PreferenceValue;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<Membre> _Membre;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnMembreIdChanging(int value);
    partial void OnMembreIdChanged();
    partial void OnPreferenceKeyChanging(string value);
    partial void OnPreferenceKeyChanged();
    partial void OnPreferenceValueChanging(string value);
    partial void OnPreferenceValueChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public MembrePreference()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MembreId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int MembreId
		{
			get
			{
				return this._MembreId;
			}
			set
			{
				if ((this._MembreId != value))
				{
					if (this._Membre.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMembreIdChanging(value);
					this.SendPropertyChanging();
					this._MembreId = value;
					this.SendPropertyChanged("MembreId");
					this.OnMembreIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreferenceKey", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string PreferenceKey
		{
			get
			{
				return this._PreferenceKey;
			}
			set
			{
				if ((this._PreferenceKey != value))
				{
					this.OnPreferenceKeyChanging(value);
					this.SendPropertyChanging();
					this._PreferenceKey = value;
					this.SendPropertyChanged("PreferenceKey");
					this.OnPreferenceKeyChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PreferenceValue", DbType="VarChar(150) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string PreferenceValue
		{
			get
			{
				return this._PreferenceValue;
			}
			set
			{
				if ((this._PreferenceValue != value))
				{
					this.OnPreferenceValueChanging(value);
					this.SendPropertyChanging();
					this._PreferenceValue = value;
					this.SendPropertyChanged("PreferenceValue");
					this.OnPreferenceValueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Membre_MembrePreference", Storage="_Membre", ThisKey="MembreId", OtherKey="Id", IsForeignKey=true)]
		public Membre Membre
		{
			get
			{
				return this._Membre.Entity;
			}
			set
			{
				Membre previousValue = this._Membre.Entity;
				if (((previousValue != value) 
							|| (this._Membre.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Membre.Entity = null;
						previousValue.MembrePreferences.Remove(this);
					}
					this._Membre.Entity = value;
					if ((value != null))
					{
						value.MembrePreferences.Add(this);
						this._MembreId = value.Id;
					}
					else
					{
						this._MembreId = default(int);
					}
					this.SendPropertyChanged("Membre");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Membre = default(EntityRef<Membre>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Membres")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Membre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _ConcentrationId;
		
		private string _CodeUniversel;
		
		private string _Nom;
		
		private string _Prenom;
		
		private string _Courriel;
		
		private string _Telephone;
		
		private bool _Actif;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<ContactUrgence> _ContactsUrgences;
		
		private EntitySet<MembrePreference> _MembrePreferences;
		
		private EntitySet<MembreAllergie> _MembresAllergies;
		
		private EntitySet<MembreClub> _MembresClubs;
		
		private EntitySet<MembreFormation> _MembresFormations;
		
		private EntitySet<Suivie> _Suivies;
		
		private EntityRef<Concentration> _Concentration;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnConcentrationIdChanging(System.Nullable<int> value);
    partial void OnConcentrationIdChanged();
    partial void OnCodeUniverselChanging(string value);
    partial void OnCodeUniverselChanged();
    partial void OnNomChanging(string value);
    partial void OnNomChanged();
    partial void OnPrenomChanging(string value);
    partial void OnPrenomChanged();
    partial void OnCourrielChanging(string value);
    partial void OnCourrielChanged();
    partial void OnTelephoneChanging(string value);
    partial void OnTelephoneChanged();
    partial void OnActifChanging(bool value);
    partial void OnActifChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public Membre()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConcentrationId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public System.Nullable<int> ConcentrationId
		{
			get
			{
				return this._ConcentrationId;
			}
			set
			{
				if ((this._ConcentrationId != value))
				{
					if (this._Concentration.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConcentrationIdChanging(value);
					this.SendPropertyChanging();
					this._ConcentrationId = value;
					this.SendPropertyChanged("ConcentrationId");
					this.OnConcentrationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodeUniversel", DbType="VarChar(10) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string CodeUniversel
		{
			get
			{
				return this._CodeUniversel;
			}
			set
			{
				if ((this._CodeUniversel != value))
				{
					this.OnCodeUniverselChanging(value);
					this.SendPropertyChanging();
					this._CodeUniversel = value;
					this.SendPropertyChanged("CodeUniversel");
					this.OnCodeUniverselChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nom", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string Nom
		{
			get
			{
				return this._Nom;
			}
			set
			{
				if ((this._Nom != value))
				{
					this.OnNomChanging(value);
					this.SendPropertyChanging();
					this._Nom = value;
					this.SendPropertyChanged("Nom");
					this.OnNomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prenom", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public string Prenom
		{
			get
			{
				return this._Prenom;
			}
			set
			{
				if ((this._Prenom != value))
				{
					this.OnPrenomChanging(value);
					this.SendPropertyChanging();
					this._Prenom = value;
					this.SendPropertyChanged("Prenom");
					this.OnPrenomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Courriel", DbType="VarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public string Courriel
		{
			get
			{
				return this._Courriel;
			}
			set
			{
				if ((this._Courriel != value))
				{
					this.OnCourrielChanging(value);
					this.SendPropertyChanging();
					this._Courriel = value;
					this.SendPropertyChanged("Courriel");
					this.OnCourrielChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Telephone", DbType="VarChar(20)", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public string Telephone
		{
			get
			{
				return this._Telephone;
			}
			set
			{
				if ((this._Telephone != value))
				{
					this.OnTelephoneChanging(value);
					this.SendPropertyChanging();
					this._Telephone = value;
					this.SendPropertyChanged("Telephone");
					this.OnTelephoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Actif", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8)]
		public bool Actif
		{
			get
			{
				return this._Actif;
			}
			set
			{
				if ((this._Actif != value))
				{
					this.OnActifChanging(value);
					this.SendPropertyChanging();
					this._Actif = value;
					this.SendPropertyChanged("Actif");
					this.OnActifChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=9)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Membre_ContactUrgence", Storage="_ContactsUrgences", ThisKey="Id", OtherKey="MembreId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=10, EmitDefaultValue=false)]
		public EntitySet<ContactUrgence> ContactUrgences
		{
			get
			{
				if ((this.serializing 
							&& (this._ContactsUrgences.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ContactsUrgences;
			}
			set
			{
				this._ContactsUrgences.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Membre_MembrePreference", Storage="_MembrePreferences", ThisKey="Id", OtherKey="MembreId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=11, EmitDefaultValue=false)]
		public EntitySet<MembrePreference> MembrePreferences
		{
			get
			{
				if ((this.serializing 
							&& (this._MembrePreferences.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._MembrePreferences;
			}
			set
			{
				this._MembrePreferences.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Membre_MembreAllergie", Storage="_MembresAllergies", ThisKey="Id", OtherKey="MembreId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=12, EmitDefaultValue=false)]
		public EntitySet<MembreAllergie> MembreAllergies
		{
			get
			{
				if ((this.serializing 
							&& (this._MembresAllergies.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._MembresAllergies;
			}
			set
			{
				this._MembresAllergies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Membre_MembreClub", Storage="_MembresClubs", ThisKey="Id", OtherKey="MembreId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=13, EmitDefaultValue=false)]
		public EntitySet<MembreClub> MembreClubs
		{
			get
			{
				if ((this.serializing 
							&& (this._MembresClubs.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._MembresClubs;
			}
			set
			{
				this._MembresClubs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Membre_MembreFormation", Storage="_MembresFormations", ThisKey="Id", OtherKey="MembreId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=14, EmitDefaultValue=false)]
		public EntitySet<MembreFormation> MembreFormations
		{
			get
			{
				if ((this.serializing 
							&& (this._MembresFormations.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._MembresFormations;
			}
			set
			{
				this._MembresFormations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Membre_Suivie", Storage="_Suivies", ThisKey="Id", OtherKey="MembreId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=15, EmitDefaultValue=false)]
		public EntitySet<Suivie> Suivies
		{
			get
			{
				if ((this.serializing 
							&& (this._Suivies.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Suivies;
			}
			set
			{
				this._Suivies.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concentration_Membre", Storage="_Concentration", ThisKey="ConcentrationId", OtherKey="Id", IsForeignKey=true)]
		public Concentration Concentration
		{
			get
			{
				return this._Concentration.Entity;
			}
			set
			{
				Concentration previousValue = this._Concentration.Entity;
				if (((previousValue != value) 
							|| (this._Concentration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Concentration.Entity = null;
						previousValue.Membres.Remove(this);
					}
					this._Concentration.Entity = value;
					if ((value != null))
					{
						value.Membres.Add(this);
						this._ConcentrationId = value.Id;
					}
					else
					{
						this._ConcentrationId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Concentration");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_ContactsUrgences(ContactUrgence entity)
		{
			this.SendPropertyChanging();
			entity.Membre = this;
		}
		
		private void detach_ContactsUrgences(ContactUrgence entity)
		{
			this.SendPropertyChanging();
			entity.Membre = null;
		}
		
		private void attach_MembrePreferences(MembrePreference entity)
		{
			this.SendPropertyChanging();
			entity.Membre = this;
		}
		
		private void detach_MembrePreferences(MembrePreference entity)
		{
			this.SendPropertyChanging();
			entity.Membre = null;
		}
		
		private void attach_MembresAllergies(MembreAllergie entity)
		{
			this.SendPropertyChanging();
			entity.Membre = this;
		}
		
		private void detach_MembresAllergies(MembreAllergie entity)
		{
			this.SendPropertyChanging();
			entity.Membre = null;
		}
		
		private void attach_MembresClubs(MembreClub entity)
		{
			this.SendPropertyChanging();
			entity.Membre = this;
		}
		
		private void detach_MembresClubs(MembreClub entity)
		{
			this.SendPropertyChanging();
			entity.Membre = null;
		}
		
		private void attach_MembresFormations(MembreFormation entity)
		{
			this.SendPropertyChanging();
			entity.Membre = this;
		}
		
		private void detach_MembresFormations(MembreFormation entity)
		{
			this.SendPropertyChanging();
			entity.Membre = null;
		}
		
		private void attach_Suivies(Suivie entity)
		{
			this.SendPropertyChanging();
			entity.Membre = this;
		}
		
		private void detach_Suivies(Suivie entity)
		{
			this.SendPropertyChanging();
			entity.Membre = null;
		}
		
		private void Initialize()
		{
			this._ContactsUrgences = new EntitySet<ContactUrgence>(new Action<ContactUrgence>(this.attach_ContactsUrgences), new Action<ContactUrgence>(this.detach_ContactsUrgences));
			this._MembrePreferences = new EntitySet<MembrePreference>(new Action<MembrePreference>(this.attach_MembrePreferences), new Action<MembrePreference>(this.detach_MembrePreferences));
			this._MembresAllergies = new EntitySet<MembreAllergie>(new Action<MembreAllergie>(this.attach_MembresAllergies), new Action<MembreAllergie>(this.detach_MembresAllergies));
			this._MembresClubs = new EntitySet<MembreClub>(new Action<MembreClub>(this.attach_MembresClubs), new Action<MembreClub>(this.detach_MembresClubs));
			this._MembresFormations = new EntitySet<MembreFormation>(new Action<MembreFormation>(this.attach_MembresFormations), new Action<MembreFormation>(this.detach_MembresFormations));
			this._Suivies = new EntitySet<Suivie>(new Action<Suivie>(this.attach_Suivies), new Action<Suivie>(this.detach_Suivies));
			this._Concentration = default(EntityRef<Concentration>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MembresAllergies")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class MembreAllergie : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MembreId;
		
		private int _AllergieId;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<Allergie> _Allergy;
		
		private EntityRef<Membre> _Membre;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMembreIdChanging(int value);
    partial void OnMembreIdChanged();
    partial void OnAllergieIdChanging(int value);
    partial void OnAllergieIdChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public MembreAllergie()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MembreId", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int MembreId
		{
			get
			{
				return this._MembreId;
			}
			set
			{
				if ((this._MembreId != value))
				{
					if (this._Membre.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMembreIdChanging(value);
					this.SendPropertyChanging();
					this._MembreId = value;
					this.SendPropertyChanged("MembreId");
					this.OnMembreIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AllergieId", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int AllergieId
		{
			get
			{
				return this._AllergieId;
			}
			set
			{
				if ((this._AllergieId != value))
				{
					if (this._Allergy.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAllergieIdChanging(value);
					this.SendPropertyChanging();
					this._AllergieId = value;
					this.SendPropertyChanged("AllergieId");
					this.OnAllergieIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Allergie_MembreAllergie", Storage="_Allergy", ThisKey="AllergieId", OtherKey="Id", IsForeignKey=true)]
		public Allergie Allergie
		{
			get
			{
				return this._Allergy.Entity;
			}
			set
			{
				Allergie previousValue = this._Allergy.Entity;
				if (((previousValue != value) 
							|| (this._Allergy.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Allergy.Entity = null;
						previousValue.MembreAllergies.Remove(this);
					}
					this._Allergy.Entity = value;
					if ((value != null))
					{
						value.MembreAllergies.Add(this);
						this._AllergieId = value.Id;
					}
					else
					{
						this._AllergieId = default(int);
					}
					this.SendPropertyChanged("Allergie");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Membre_MembreAllergie", Storage="_Membre", ThisKey="MembreId", OtherKey="Id", IsForeignKey=true)]
		public Membre Membre
		{
			get
			{
				return this._Membre.Entity;
			}
			set
			{
				Membre previousValue = this._Membre.Entity;
				if (((previousValue != value) 
							|| (this._Membre.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Membre.Entity = null;
						previousValue.MembreAllergies.Remove(this);
					}
					this._Membre.Entity = value;
					if ((value != null))
					{
						value.MembreAllergies.Add(this);
						this._MembreId = value.Id;
					}
					else
					{
						this._MembreId = default(int);
					}
					this.SendPropertyChanged("Membre");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Allergy = default(EntityRef<Allergie>);
			this._Membre = default(EntityRef<Membre>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MembresClubs")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class MembreClub : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ClubId;
		
		private int _MembreId;
		
		private System.DateTime _DateDebut;
		
		private System.Nullable<System.DateTime> _DateFin;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<Club> _Club;
		
		private EntityRef<Membre> _Membre;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnClubIdChanging(int value);
    partial void OnClubIdChanged();
    partial void OnMembreIdChanging(int value);
    partial void OnMembreIdChanged();
    partial void OnDateDebutChanging(System.DateTime value);
    partial void OnDateDebutChanged();
    partial void OnDateFinChanging(System.Nullable<System.DateTime> value);
    partial void OnDateFinChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public MembreClub()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClubId", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int ClubId
		{
			get
			{
				return this._ClubId;
			}
			set
			{
				if ((this._ClubId != value))
				{
					if (this._Club.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClubIdChanging(value);
					this.SendPropertyChanging();
					this._ClubId = value;
					this.SendPropertyChanged("ClubId");
					this.OnClubIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MembreId", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int MembreId
		{
			get
			{
				return this._MembreId;
			}
			set
			{
				if ((this._MembreId != value))
				{
					if (this._Membre.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMembreIdChanging(value);
					this.SendPropertyChanging();
					this._MembreId = value;
					this.SendPropertyChanged("MembreId");
					this.OnMembreIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateDebut", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public System.DateTime DateDebut
		{
			get
			{
				return this._DateDebut;
			}
			set
			{
				if ((this._DateDebut != value))
				{
					this.OnDateDebutChanging(value);
					this.SendPropertyChanging();
					this._DateDebut = value;
					this.SendPropertyChanged("DateDebut");
					this.OnDateDebutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateFin", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public System.Nullable<System.DateTime> DateFin
		{
			get
			{
				return this._DateFin;
			}
			set
			{
				if ((this._DateFin != value))
				{
					this.OnDateFinChanging(value);
					this.SendPropertyChanging();
					this._DateFin = value;
					this.SendPropertyChanged("DateFin");
					this.OnDateFinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Club_MembreClub", Storage="_Club", ThisKey="ClubId", OtherKey="Id", IsForeignKey=true)]
		public Club Club
		{
			get
			{
				return this._Club.Entity;
			}
			set
			{
				Club previousValue = this._Club.Entity;
				if (((previousValue != value) 
							|| (this._Club.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Club.Entity = null;
						previousValue.MembreClubs.Remove(this);
					}
					this._Club.Entity = value;
					if ((value != null))
					{
						value.MembreClubs.Add(this);
						this._ClubId = value.Id;
					}
					else
					{
						this._ClubId = default(int);
					}
					this.SendPropertyChanged("Club");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Membre_MembreClub", Storage="_Membre", ThisKey="MembreId", OtherKey="Id", IsForeignKey=true)]
		public Membre Membre
		{
			get
			{
				return this._Membre.Entity;
			}
			set
			{
				Membre previousValue = this._Membre.Entity;
				if (((previousValue != value) 
							|| (this._Membre.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Membre.Entity = null;
						previousValue.MembreClubs.Remove(this);
					}
					this._Membre.Entity = value;
					if ((value != null))
					{
						value.MembreClubs.Add(this);
						this._MembreId = value.Id;
					}
					else
					{
						this._MembreId = default(int);
					}
					this.SendPropertyChanged("Membre");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Club = default(EntityRef<Club>);
			this._Membre = default(EntityRef<Membre>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.MembresFormations")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class MembreFormation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MembreId;
		
		private int _FormationId;
		
		private System.DateTime _DateSuivie;
		
		private System.Nullable<System.DateTime> _DateEcheance;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<Formation> _Formation;
		
		private EntityRef<Membre> _Membre;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMembreIdChanging(int value);
    partial void OnMembreIdChanged();
    partial void OnFormationIdChanging(int value);
    partial void OnFormationIdChanged();
    partial void OnDateSuivieChanging(System.DateTime value);
    partial void OnDateSuivieChanged();
    partial void OnDateEcheanceChanging(System.Nullable<System.DateTime> value);
    partial void OnDateEcheanceChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public MembreFormation()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MembreId", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int MembreId
		{
			get
			{
				return this._MembreId;
			}
			set
			{
				if ((this._MembreId != value))
				{
					if (this._Membre.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMembreIdChanging(value);
					this.SendPropertyChanging();
					this._MembreId = value;
					this.SendPropertyChanged("MembreId");
					this.OnMembreIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FormationId", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int FormationId
		{
			get
			{
				return this._FormationId;
			}
			set
			{
				if ((this._FormationId != value))
				{
					if (this._Formation.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFormationIdChanging(value);
					this.SendPropertyChanging();
					this._FormationId = value;
					this.SendPropertyChanged("FormationId");
					this.OnFormationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateSuivie", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public System.DateTime DateSuivie
		{
			get
			{
				return this._DateSuivie;
			}
			set
			{
				if ((this._DateSuivie != value))
				{
					this.OnDateSuivieChanging(value);
					this.SendPropertyChanging();
					this._DateSuivie = value;
					this.SendPropertyChanged("DateSuivie");
					this.OnDateSuivieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateEcheance", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public System.Nullable<System.DateTime> DateEcheance
		{
			get
			{
				return this._DateEcheance;
			}
			set
			{
				if ((this._DateEcheance != value))
				{
					this.OnDateEcheanceChanging(value);
					this.SendPropertyChanging();
					this._DateEcheance = value;
					this.SendPropertyChanged("DateEcheance");
					this.OnDateEcheanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Formation_MembreFormation", Storage="_Formation", ThisKey="FormationId", OtherKey="Id", IsForeignKey=true)]
		public Formation Formation
		{
			get
			{
				return this._Formation.Entity;
			}
			set
			{
				Formation previousValue = this._Formation.Entity;
				if (((previousValue != value) 
							|| (this._Formation.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Formation.Entity = null;
						previousValue.MembreFormations.Remove(this);
					}
					this._Formation.Entity = value;
					if ((value != null))
					{
						value.MembreFormations.Add(this);
						this._FormationId = value.Id;
					}
					else
					{
						this._FormationId = default(int);
					}
					this.SendPropertyChanged("Formation");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Membre_MembreFormation", Storage="_Membre", ThisKey="MembreId", OtherKey="Id", IsForeignKey=true)]
		public Membre Membre
		{
			get
			{
				return this._Membre.Entity;
			}
			set
			{
				Membre previousValue = this._Membre.Entity;
				if (((previousValue != value) 
							|| (this._Membre.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Membre.Entity = null;
						previousValue.MembreFormations.Remove(this);
					}
					this._Membre.Entity = value;
					if ((value != null))
					{
						value.MembreFormations.Add(this);
						this._MembreId = value.Id;
					}
					else
					{
						this._MembreId = default(int);
					}
					this.SendPropertyChanged("Membre");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Formation = default(EntityRef<Formation>);
			this._Membre = default(EntityRef<Membre>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.StatutsSuivie")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class StatutSuivie : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Code;
		
		private string _Description;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<Suivie> _Suivies;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public StatutSuivie()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(150) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatutSuivie_Suivie", Storage="_Suivies", ThisKey="Id", OtherKey="StatutSuivieId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5, EmitDefaultValue=false)]
		public EntitySet<Suivie> Suivies
		{
			get
			{
				if ((this.serializing 
							&& (this._Suivies.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Suivies;
			}
			set
			{
				this._Suivies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Suivies(Suivie entity)
		{
			this.SendPropertyChanging();
			entity.StatutSuivie = this;
		}
		
		private void detach_Suivies(Suivie entity)
		{
			this.SendPropertyChanging();
			entity.StatutSuivie = null;
		}
		
		private void Initialize()
		{
			this._Suivies = new EntitySet<Suivie>(new Action<Suivie>(this.attach_Suivies), new Action<Suivie>(this.detach_Suivies));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Suivies")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Suivie : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _CommanditeId;
		
		private int _MembreId;
		
		private int _StatutSuivieId;
		
		private System.DateTime _DateSuivie;
		
		private string _Commentaire;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<Commandite> _Commandite;
		
		private EntityRef<Membre> _Membre;
		
		private EntityRef<StatutSuivie> _StatutsSuivie;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnCommanditeIdChanging(int value);
    partial void OnCommanditeIdChanged();
    partial void OnMembreIdChanging(int value);
    partial void OnMembreIdChanged();
    partial void OnStatutSuivieIdChanging(int value);
    partial void OnStatutSuivieIdChanged();
    partial void OnDateSuivieChanging(System.DateTime value);
    partial void OnDateSuivieChanged();
    partial void OnCommentaireChanging(string value);
    partial void OnCommentaireChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public Suivie()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommanditeId", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int CommanditeId
		{
			get
			{
				return this._CommanditeId;
			}
			set
			{
				if ((this._CommanditeId != value))
				{
					if (this._Commandite.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommanditeIdChanging(value);
					this.SendPropertyChanging();
					this._CommanditeId = value;
					this.SendPropertyChanged("CommanditeId");
					this.OnCommanditeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MembreId", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int MembreId
		{
			get
			{
				return this._MembreId;
			}
			set
			{
				if ((this._MembreId != value))
				{
					if (this._Membre.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMembreIdChanging(value);
					this.SendPropertyChanging();
					this._MembreId = value;
					this.SendPropertyChanged("MembreId");
					this.OnMembreIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatutSuivieId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public int StatutSuivieId
		{
			get
			{
				return this._StatutSuivieId;
			}
			set
			{
				if ((this._StatutSuivieId != value))
				{
					if (this._StatutsSuivie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatutSuivieIdChanging(value);
					this.SendPropertyChanging();
					this._StatutSuivieId = value;
					this.SendPropertyChanged("StatutSuivieId");
					this.OnStatutSuivieIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateSuivie", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public System.DateTime DateSuivie
		{
			get
			{
				return this._DateSuivie;
			}
			set
			{
				if ((this._DateSuivie != value))
				{
					this.OnDateSuivieChanging(value);
					this.SendPropertyChanging();
					this._DateSuivie = value;
					this.SendPropertyChanged("DateSuivie");
					this.OnDateSuivieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Commentaire", DbType="VarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public string Commentaire
		{
			get
			{
				return this._Commentaire;
			}
			set
			{
				if ((this._Commentaire != value))
				{
					this.OnCommentaireChanging(value);
					this.SendPropertyChanging();
					this._Commentaire = value;
					this.SendPropertyChanged("Commentaire");
					this.OnCommentaireChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Commandite_Suivie", Storage="_Commandite", ThisKey="CommanditeId", OtherKey="Id", IsForeignKey=true)]
		public Commandite Commandite
		{
			get
			{
				return this._Commandite.Entity;
			}
			set
			{
				Commandite previousValue = this._Commandite.Entity;
				if (((previousValue != value) 
							|| (this._Commandite.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Commandite.Entity = null;
						previousValue.Suivies.Remove(this);
					}
					this._Commandite.Entity = value;
					if ((value != null))
					{
						value.Suivies.Add(this);
						this._CommanditeId = value.Id;
					}
					else
					{
						this._CommanditeId = default(int);
					}
					this.SendPropertyChanged("Commandite");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Membre_Suivie", Storage="_Membre", ThisKey="MembreId", OtherKey="Id", IsForeignKey=true)]
		public Membre Membre
		{
			get
			{
				return this._Membre.Entity;
			}
			set
			{
				Membre previousValue = this._Membre.Entity;
				if (((previousValue != value) 
							|| (this._Membre.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Membre.Entity = null;
						previousValue.Suivies.Remove(this);
					}
					this._Membre.Entity = value;
					if ((value != null))
					{
						value.Suivies.Add(this);
						this._MembreId = value.Id;
					}
					else
					{
						this._MembreId = default(int);
					}
					this.SendPropertyChanged("Membre");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatutSuivie_Suivie", Storage="_StatutsSuivie", ThisKey="StatutSuivieId", OtherKey="Id", IsForeignKey=true)]
		public StatutSuivie StatutSuivie
		{
			get
			{
				return this._StatutsSuivie.Entity;
			}
			set
			{
				StatutSuivie previousValue = this._StatutsSuivie.Entity;
				if (((previousValue != value) 
							|| (this._StatutsSuivie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StatutsSuivie.Entity = null;
						previousValue.Suivies.Remove(this);
					}
					this._StatutsSuivie.Entity = value;
					if ((value != null))
					{
						value.Suivies.Add(this);
						this._StatutSuivieId = value.Id;
					}
					else
					{
						this._StatutSuivieId = default(int);
					}
					this.SendPropertyChanged("StatutSuivie");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Commandite = default(EntityRef<Commandite>);
			this._Membre = default(EntityRef<Membre>);
			this._StatutsSuivie = default(EntityRef<StatutSuivie>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
}
#pragma warning restore 1591
