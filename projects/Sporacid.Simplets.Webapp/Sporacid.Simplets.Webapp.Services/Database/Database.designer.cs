#pragma warning disable 1591
//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.18331
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Sporacid.Simplets.Webapp.Services.Database
{
	using System.Data.Linq;
	using System.Data.Linq.Mapping;
	using System.Data;
	using System.Collections.Generic;
	using System.Reflection;
	using System.Linq;
	using System.Linq.Expressions;
	using System.Runtime.Serialization;
	using System.ComponentModel;
	using System;
	
	
	[global::System.Data.Linq.Mapping.DatabaseAttribute(Name="SIMPLETS")]
	public partial class DatabaseDataContext : System.Data.Linq.DataContext
	{
		
		private static System.Data.Linq.Mapping.MappingSource mappingSource = new AttributeMappingSource();
		
    #region Extensibility Method Definitions
    partial void OnCreated();
    partial void InsertClub(Club instance);
    partial void UpdateClub(Club instance);
    partial void DeleteClub(Club instance);
    partial void InsertXpTable(XpTable instance);
    partial void UpdateXpTable(XpTable instance);
    partial void DeleteXpTable(XpTable instance);
    partial void InsertCommanditaire(Commanditaire instance);
    partial void UpdateCommanditaire(Commanditaire instance);
    partial void DeleteCommanditaire(Commanditaire instance);
    partial void InsertCommandite(Commandite instance);
    partial void UpdateCommandite(Commandite instance);
    partial void DeleteCommandite(Commandite instance);
    partial void InsertEvenement(Evenement instance);
    partial void UpdateEvenement(Evenement instance);
    partial void DeleteEvenement(Evenement instance);
    partial void InsertFournisseur(Fournisseur instance);
    partial void UpdateFournisseur(Fournisseur instance);
    partial void DeleteFournisseur(Fournisseur instance);
    partial void InsertFournisseurItem(FournisseurItem instance);
    partial void UpdateFournisseurItem(FournisseurItem instance);
    partial void DeleteFournisseurItem(FournisseurItem instance);
    partial void InsertGroupe(Groupe instance);
    partial void UpdateGroupe(Groupe instance);
    partial void DeleteGroupe(Groupe instance);
    partial void InsertGroupeMembre(GroupeMembre instance);
    partial void UpdateGroupeMembre(GroupeMembre instance);
    partial void DeleteGroupeMembre(GroupeMembre instance);
    partial void InsertItem(Item instance);
    partial void UpdateItem(Item instance);
    partial void DeleteItem(Item instance);
    partial void InsertMeeting(Meeting instance);
    partial void UpdateMeeting(Meeting instance);
    partial void DeleteMeeting(Meeting instance);
    partial void InsertMeetingMembre(MeetingMembre instance);
    partial void UpdateMeetingMembre(MeetingMembre instance);
    partial void DeleteMeetingMembre(MeetingMembre instance);
    partial void InsertMembre(Membre instance);
    partial void UpdateMembre(Membre instance);
    partial void DeleteMembre(Membre instance);
    partial void InsertStatutSuivie(StatutSuivie instance);
    partial void UpdateStatutSuivie(StatutSuivie instance);
    partial void DeleteStatutSuivie(StatutSuivie instance);
    partial void InsertSuivie(Suivie instance);
    partial void UpdateSuivie(Suivie instance);
    partial void DeleteSuivie(Suivie instance);
    partial void InsertTypeCommanditaire(TypeCommanditaire instance);
    partial void UpdateTypeCommanditaire(TypeCommanditaire instance);
    partial void DeleteTypeCommanditaire(TypeCommanditaire instance);
    partial void InsertTypeCommandite(TypeCommandite instance);
    partial void UpdateTypeCommandite(TypeCommandite instance);
    partial void DeleteTypeCommandite(TypeCommandite instance);
    partial void InsertTypeFournisseur(TypeFournisseur instance);
    partial void UpdateTypeFournisseur(TypeFournisseur instance);
    partial void DeleteTypeFournisseur(TypeFournisseur instance);
    partial void InsertAdresse(Adresse instance);
    partial void UpdateAdresse(Adresse instance);
    partial void DeleteAdresse(Adresse instance);
    partial void InsertConcentration(Concentration instance);
    partial void UpdateConcentration(Concentration instance);
    partial void DeleteConcentration(Concentration instance);
    partial void InsertContact(Contact instance);
    partial void UpdateContact(Contact instance);
    partial void DeleteContact(Contact instance);
    partial void InsertTypeContact(TypeContact instance);
    partial void UpdateTypeContact(TypeContact instance);
    partial void DeleteTypeContact(TypeContact instance);
    partial void InsertUnite(Unite instance);
    partial void UpdateUnite(Unite instance);
    partial void DeleteUnite(Unite instance);
    partial void InsertAntecedent(Antecedent instance);
    partial void UpdateAntecedent(Antecedent instance);
    partial void DeleteAntecedent(Antecedent instance);
    partial void InsertContactUrgence(ContactUrgence instance);
    partial void UpdateContactUrgence(ContactUrgence instance);
    partial void DeleteContactUrgence(ContactUrgence instance);
    partial void InsertFormation(Formation instance);
    partial void UpdateFormation(Formation instance);
    partial void DeleteFormation(Formation instance);
    partial void InsertPreference(Preference instance);
    partial void UpdatePreference(Preference instance);
    partial void DeletePreference(Preference instance);
    partial void InsertProfil(Profil instance);
    partial void UpdateProfil(Profil instance);
    partial void DeleteProfil(Profil instance);
    partial void InsertProfilAvance(ProfilAvance instance);
    partial void UpdateProfilAvance(ProfilAvance instance);
    partial void DeleteProfilAvance(ProfilAvance instance);
    partial void InsertTypeAntecedent(TypeAntecedent instance);
    partial void UpdateTypeAntecedent(TypeAntecedent instance);
    partial void DeleteTypeAntecedent(TypeAntecedent instance);
    #endregion
		
		public DatabaseDataContext() : 
				base(global::System.Configuration.ConfigurationManager.ConnectionStrings["SIMPLETSConnectionString"].ConnectionString, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(string connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public DatabaseDataContext(System.Data.IDbConnection connection, System.Data.Linq.Mapping.MappingSource mappingSource) : 
				base(connection, mappingSource)
		{
			OnCreated();
		}
		
		public System.Data.Linq.Table<Club> Clubs
		{
			get
			{
				return this.GetTable<Club>();
			}
		}
		
		public System.Data.Linq.Table<XpTable> XpTables
		{
			get
			{
				return this.GetTable<XpTable>();
			}
		}
		
		public System.Data.Linq.Table<Commanditaire> Commanditaires
		{
			get
			{
				return this.GetTable<Commanditaire>();
			}
		}
		
		public System.Data.Linq.Table<Commandite> Commandites
		{
			get
			{
				return this.GetTable<Commandite>();
			}
		}
		
		public System.Data.Linq.Table<Evenement> Evenements
		{
			get
			{
				return this.GetTable<Evenement>();
			}
		}
		
		public System.Data.Linq.Table<Fournisseur> Fournisseurs
		{
			get
			{
				return this.GetTable<Fournisseur>();
			}
		}
		
		public System.Data.Linq.Table<FournisseurItem> FournisseurItems
		{
			get
			{
				return this.GetTable<FournisseurItem>();
			}
		}
		
		public System.Data.Linq.Table<Groupe> Groupes
		{
			get
			{
				return this.GetTable<Groupe>();
			}
		}
		
		public System.Data.Linq.Table<GroupeMembre> GroupeMembres
		{
			get
			{
				return this.GetTable<GroupeMembre>();
			}
		}
		
		public System.Data.Linq.Table<Item> Items
		{
			get
			{
				return this.GetTable<Item>();
			}
		}
		
		public System.Data.Linq.Table<Meeting> Meetings
		{
			get
			{
				return this.GetTable<Meeting>();
			}
		}
		
		public System.Data.Linq.Table<MeetingMembre> MeetingMembres
		{
			get
			{
				return this.GetTable<MeetingMembre>();
			}
		}
		
		public System.Data.Linq.Table<Membre> Membres
		{
			get
			{
				return this.GetTable<Membre>();
			}
		}
		
		public System.Data.Linq.Table<StatutSuivie> StatutSuivies
		{
			get
			{
				return this.GetTable<StatutSuivie>();
			}
		}
		
		public System.Data.Linq.Table<Suivie> Suivies
		{
			get
			{
				return this.GetTable<Suivie>();
			}
		}
		
		public System.Data.Linq.Table<TypeCommanditaire> TypeCommanditaires
		{
			get
			{
				return this.GetTable<TypeCommanditaire>();
			}
		}
		
		public System.Data.Linq.Table<TypeCommandite> TypeCommandites
		{
			get
			{
				return this.GetTable<TypeCommandite>();
			}
		}
		
		public System.Data.Linq.Table<TypeFournisseur> TypeFournisseurs
		{
			get
			{
				return this.GetTable<TypeFournisseur>();
			}
		}
		
		public System.Data.Linq.Table<Adresse> Adresses
		{
			get
			{
				return this.GetTable<Adresse>();
			}
		}
		
		public System.Data.Linq.Table<Concentration> Concentrations
		{
			get
			{
				return this.GetTable<Concentration>();
			}
		}
		
		public System.Data.Linq.Table<Contact> Contacts
		{
			get
			{
				return this.GetTable<Contact>();
			}
		}
		
		public System.Data.Linq.Table<TypeContact> TypeContacts
		{
			get
			{
				return this.GetTable<TypeContact>();
			}
		}
		
		public System.Data.Linq.Table<Unite> Unites
		{
			get
			{
				return this.GetTable<Unite>();
			}
		}
		
		public System.Data.Linq.Table<Antecedent> Antecedents
		{
			get
			{
				return this.GetTable<Antecedent>();
			}
		}
		
		public System.Data.Linq.Table<ContactUrgence> ContactUrgences
		{
			get
			{
				return this.GetTable<ContactUrgence>();
			}
		}
		
		public System.Data.Linq.Table<Formation> Formations
		{
			get
			{
				return this.GetTable<Formation>();
			}
		}
		
		public System.Data.Linq.Table<Preference> Preferences
		{
			get
			{
				return this.GetTable<Preference>();
			}
		}
		
		public System.Data.Linq.Table<Profil> Profils
		{
			get
			{
				return this.GetTable<Profil>();
			}
		}
		
		public System.Data.Linq.Table<ProfilAvance> ProfilAvances
		{
			get
			{
				return this.GetTable<ProfilAvance>();
			}
		}
		
		public System.Data.Linq.Table<TypeAntecedent> TypeAntecedents
		{
			get
			{
				return this.GetTable<TypeAntecedent>();
			}
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="clubs.Clubs")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Club : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Nom;
		
		private string _Description;
		
		private System.Data.Linq.Binary _Logo;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<Commanditaire> _Commanditaires;
		
		private EntitySet<Evenement> _Evenements;
		
		private EntitySet<Fournisseur> _Fournisseurs;
		
		private EntitySet<Groupe> _Groupes;
		
		private EntitySet<Item> _Items;
		
		private EntitySet<Meeting> _Meetings;
		
		private EntitySet<Membre> _Membres;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNomChanging(string value);
    partial void OnNomChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnLogoChanging(System.Data.Linq.Binary value);
    partial void OnLogoChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public Club()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nom", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Nom
		{
			get
			{
				return this._Nom;
			}
			set
			{
				if ((this._Nom != value))
				{
					this.OnNomChanging(value);
					this.SendPropertyChanging();
					this._Nom = value;
					this.SendPropertyChanged("Nom");
					this.OnNomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(250)", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Logo", DbType="VarBinary(4000)", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public System.Data.Linq.Binary Logo
		{
			get
			{
				return this._Logo;
			}
			set
			{
				if ((this._Logo != value))
				{
					this.OnLogoChanging(value);
					this.SendPropertyChanging();
					this._Logo = value;
					this.SendPropertyChanged("Logo");
					this.OnLogoChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Club_Commanditaire", Storage="_Commanditaires", ThisKey="Id", OtherKey="ClubId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6, EmitDefaultValue=false)]
		public EntitySet<Commanditaire> Commanditaires
		{
			get
			{
				if ((this.serializing 
							&& (this._Commanditaires.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Commanditaires;
			}
			set
			{
				this._Commanditaires.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Club_Evenement", Storage="_Evenements", ThisKey="Id", OtherKey="ClubId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7, EmitDefaultValue=false)]
		public EntitySet<Evenement> Evenements
		{
			get
			{
				if ((this.serializing 
							&& (this._Evenements.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Evenements;
			}
			set
			{
				this._Evenements.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Club_Fournisseur", Storage="_Fournisseurs", ThisKey="Id", OtherKey="ClubId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8, EmitDefaultValue=false)]
		public EntitySet<Fournisseur> Fournisseurs
		{
			get
			{
				if ((this.serializing 
							&& (this._Fournisseurs.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Fournisseurs;
			}
			set
			{
				this._Fournisseurs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Club_Groupe", Storage="_Groupes", ThisKey="Id", OtherKey="ClubId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=9, EmitDefaultValue=false)]
		public EntitySet<Groupe> Groupes
		{
			get
			{
				if ((this.serializing 
							&& (this._Groupes.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Groupes;
			}
			set
			{
				this._Groupes.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Club_Item", Storage="_Items", ThisKey="Id", OtherKey="ClubId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=10, EmitDefaultValue=false)]
		public EntitySet<Item> Items
		{
			get
			{
				if ((this.serializing 
							&& (this._Items.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Club_Meeting", Storage="_Meetings", ThisKey="Id", OtherKey="ClubId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=11, EmitDefaultValue=false)]
		public EntitySet<Meeting> Meetings
		{
			get
			{
				if ((this.serializing 
							&& (this._Meetings.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Meetings;
			}
			set
			{
				this._Meetings.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Club_Membre", Storage="_Membres", ThisKey="Id", OtherKey="ClubId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=12, EmitDefaultValue=false)]
		public EntitySet<Membre> Membres
		{
			get
			{
				if ((this.serializing 
							&& (this._Membres.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Membres;
			}
			set
			{
				this._Membres.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Commanditaires(Commanditaire entity)
		{
			this.SendPropertyChanging();
			entity.Club = this;
		}
		
		private void detach_Commanditaires(Commanditaire entity)
		{
			this.SendPropertyChanging();
			entity.Club = null;
		}
		
		private void attach_Evenements(Evenement entity)
		{
			this.SendPropertyChanging();
			entity.Club = this;
		}
		
		private void detach_Evenements(Evenement entity)
		{
			this.SendPropertyChanging();
			entity.Club = null;
		}
		
		private void attach_Fournisseurs(Fournisseur entity)
		{
			this.SendPropertyChanging();
			entity.Club = this;
		}
		
		private void detach_Fournisseurs(Fournisseur entity)
		{
			this.SendPropertyChanging();
			entity.Club = null;
		}
		
		private void attach_Groupes(Groupe entity)
		{
			this.SendPropertyChanging();
			entity.Club = this;
		}
		
		private void detach_Groupes(Groupe entity)
		{
			this.SendPropertyChanging();
			entity.Club = null;
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Club = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Club = null;
		}
		
		private void attach_Meetings(Meeting entity)
		{
			this.SendPropertyChanging();
			entity.Club = this;
		}
		
		private void detach_Meetings(Meeting entity)
		{
			this.SendPropertyChanging();
			entity.Club = null;
		}
		
		private void attach_Membres(Membre entity)
		{
			this.SendPropertyChanging();
			entity.Club = this;
		}
		
		private void detach_Membres(Membre entity)
		{
			this.SendPropertyChanging();
			entity.Club = null;
		}
		
		private void Initialize()
		{
			this._Commanditaires = new EntitySet<Commanditaire>(new Action<Commanditaire>(this.attach_Commanditaires), new Action<Commanditaire>(this.detach_Commanditaires));
			this._Evenements = new EntitySet<Evenement>(new Action<Evenement>(this.attach_Evenements), new Action<Evenement>(this.detach_Evenements));
			this._Fournisseurs = new EntitySet<Fournisseur>(new Action<Fournisseur>(this.attach_Fournisseurs), new Action<Fournisseur>(this.detach_Fournisseurs));
			this._Groupes = new EntitySet<Groupe>(new Action<Groupe>(this.attach_Groupes), new Action<Groupe>(this.detach_Groupes));
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			this._Meetings = new EntitySet<Meeting>(new Action<Meeting>(this.attach_Meetings), new Action<Meeting>(this.detach_Meetings));
			this._Membres = new EntitySet<Membre>(new Action<Membre>(this.attach_Membres), new Action<Membre>(this.detach_Membres));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="userspace.XpTable")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class XpTable : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Level;
		
		private int _RequiredXp;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnLevelChanging(int value);
    partial void OnLevelChanged();
    partial void OnRequiredXpChanging(int value);
    partial void OnRequiredXpChanged();
    #endregion
		
		public XpTable()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Level]", Storage="_Level", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Level
		{
			get
			{
				return this._Level;
			}
			set
			{
				if ((this._Level != value))
				{
					this.OnLevelChanging(value);
					this.SendPropertyChanging();
					this._Level = value;
					this.SendPropertyChanged("Level");
					this.OnLevelChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_RequiredXp", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int RequiredXp
		{
			get
			{
				return this._RequiredXp;
			}
			set
			{
				if ((this._RequiredXp != value))
				{
					this.OnRequiredXpChanging(value);
					this.SendPropertyChanging();
					this._RequiredXp = value;
					this.SendPropertyChanged("RequiredXp");
					this.OnRequiredXpChanged();
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="clubs.Commanditaires")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Commanditaire : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ClubId;
		
		private int _TypeCommanditaireId;
		
		private System.Nullable<int> _AdresseId;
		
		private System.Nullable<int> _ContactId;
		
		private string _Nom;
		
		private string _Commentaire;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<Commandite> _Commandites;
		
		private EntityRef<Club> _Club;
		
		private EntityRef<TypeCommanditaire> _TypeCommanditaire;
		
		private EntityRef<Adresse> _Adresse;
		
		private EntityRef<Contact> _Contact;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnClubIdChanging(int value);
    partial void OnClubIdChanged();
    partial void OnTypeCommanditaireIdChanging(int value);
    partial void OnTypeCommanditaireIdChanged();
    partial void OnAdresseIdChanging(System.Nullable<int> value);
    partial void OnAdresseIdChanged();
    partial void OnContactIdChanging(System.Nullable<int> value);
    partial void OnContactIdChanged();
    partial void OnNomChanging(string value);
    partial void OnNomChanged();
    partial void OnCommentaireChanging(string value);
    partial void OnCommentaireChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public Commanditaire()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClubId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int ClubId
		{
			get
			{
				return this._ClubId;
			}
			set
			{
				if ((this._ClubId != value))
				{
					if (this._Club.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClubIdChanging(value);
					this.SendPropertyChanging();
					this._ClubId = value;
					this.SendPropertyChanged("ClubId");
					this.OnClubIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeCommanditaireId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public int TypeCommanditaireId
		{
			get
			{
				return this._TypeCommanditaireId;
			}
			set
			{
				if ((this._TypeCommanditaireId != value))
				{
					if (this._TypeCommanditaire.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeCommanditaireIdChanging(value);
					this.SendPropertyChanging();
					this._TypeCommanditaireId = value;
					this.SendPropertyChanged("TypeCommanditaireId");
					this.OnTypeCommanditaireIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdresseId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public System.Nullable<int> AdresseId
		{
			get
			{
				return this._AdresseId;
			}
			set
			{
				if ((this._AdresseId != value))
				{
					if (this._Adresse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdresseIdChanging(value);
					this.SendPropertyChanging();
					this._AdresseId = value;
					this.SendPropertyChanged("AdresseId");
					this.OnAdresseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public System.Nullable<int> ContactId
		{
			get
			{
				return this._ContactId;
			}
			set
			{
				if ((this._ContactId != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIdChanging(value);
					this.SendPropertyChanging();
					this._ContactId = value;
					this.SendPropertyChanged("ContactId");
					this.OnContactIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nom", DbType="VarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public string Nom
		{
			get
			{
				return this._Nom;
			}
			set
			{
				if ((this._Nom != value))
				{
					this.OnNomChanging(value);
					this.SendPropertyChanging();
					this._Nom = value;
					this.SendPropertyChanged("Nom");
					this.OnNomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Commentaire", DbType="VarChar(250)", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public string Commentaire
		{
			get
			{
				return this._Commentaire;
			}
			set
			{
				if ((this._Commentaire != value))
				{
					this.OnCommentaireChanging(value);
					this.SendPropertyChanging();
					this._Commentaire = value;
					this.SendPropertyChanged("Commentaire");
					this.OnCommentaireChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Commanditaire_Commandite", Storage="_Commandites", ThisKey="Id", OtherKey="CommanditaireId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=9, EmitDefaultValue=false)]
		public EntitySet<Commandite> Commandites
		{
			get
			{
				if ((this.serializing 
							&& (this._Commandites.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Commandites;
			}
			set
			{
				this._Commandites.Assign(value);
			}
		}

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Club_Commanditaire", Storage = "_Club", ThisKey = "ClubId", OtherKey = "Id", IsForeignKey = true, DeleteOnNull = true)]
		public Club Club
		{
			get
			{
				return this._Club.Entity;
			}
			set
			{
				Club previousValue = this._Club.Entity;
				if (((previousValue != value) 
							|| (this._Club.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Club.Entity = null;
						previousValue.Commanditaires.Remove(this);
					}
					this._Club.Entity = value;
					if ((value != null))
					{
						value.Commanditaires.Add(this);
						this._ClubId = value.Id;
					}
					else
					{
						this._ClubId = default(int);
					}
					this.SendPropertyChanged("Club");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypesCommanditaire_Commanditaire", Storage="_TypeCommanditaire", ThisKey="TypeCommanditaireId", OtherKey="Id", IsForeignKey=true)]
		public TypeCommanditaire TypeCommanditaire
		{
			get
			{
				return this._TypeCommanditaire.Entity;
			}
			set
			{
				TypeCommanditaire previousValue = this._TypeCommanditaire.Entity;
				if (((previousValue != value) 
							|| (this._TypeCommanditaire.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeCommanditaire.Entity = null;
						previousValue.Commanditaires.Remove(this);
					}
					this._TypeCommanditaire.Entity = value;
					if ((value != null))
					{
						value.Commanditaires.Add(this);
						this._TypeCommanditaireId = value.Id;
					}
					else
					{
						this._TypeCommanditaireId = default(int);
					}
					this.SendPropertyChanged("TypeCommanditaire");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adress_Commanditaire", Storage="_Adresse", ThisKey="AdresseId", OtherKey="Id", IsForeignKey=true)]
		public Adresse Adresse
		{
			get
			{
				return this._Adresse.Entity;
			}
			set
			{
				Adresse previousValue = this._Adresse.Entity;
				if (((previousValue != value) 
							|| (this._Adresse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Adresse.Entity = null;
						previousValue.Commanditaires.Remove(this);
					}
					this._Adresse.Entity = value;
					if ((value != null))
					{
						value.Commanditaires.Add(this);
						this._AdresseId = value.Id;
					}
					else
					{
						this._AdresseId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Adresse");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Commanditaire", Storage="_Contact", ThisKey="ContactId", OtherKey="Id", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.Commanditaires.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.Commanditaires.Add(this);
						this._ContactId = value.Id;
					}
					else
					{
						this._ContactId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Commandites(Commandite entity)
		{
			this.SendPropertyChanging();
			entity.Commanditaire = this;
		}
		
		private void detach_Commandites(Commandite entity)
		{
			this.SendPropertyChanging();
			entity.Commanditaire = null;
		}
		
		private void Initialize()
		{
			this._Commandites = new EntitySet<Commandite>(new Action<Commandite>(this.attach_Commandites), new Action<Commandite>(this.detach_Commandites));
			this._Club = default(EntityRef<Club>);
			this._TypeCommanditaire = default(EntityRef<TypeCommanditaire>);
			this._Adresse = default(EntityRef<Adresse>);
			this._Contact = default(EntityRef<Contact>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="clubs.Commandites")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Commandite : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CommanditaireId;
		
		private int _TypeCommanditeId;
		
		private System.Nullable<decimal> _Valeur;
		
		private bool _Recu;
		
		private string _Commentaire;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<Suivie> _Suivies;
		
		private EntityRef<Commanditaire> _Commanditaire;
		
		private EntityRef<TypeCommandite> _TypeCommandite;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCommanditaireIdChanging(int value);
    partial void OnCommanditaireIdChanged();
    partial void OnTypeCommanditeIdChanging(int value);
    partial void OnTypeCommanditeIdChanged();
    partial void OnValeurChanging(System.Nullable<decimal> value);
    partial void OnValeurChanged();
    partial void OnRecuChanging(bool value);
    partial void OnRecuChanged();
    partial void OnCommentaireChanging(string value);
    partial void OnCommentaireChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public Commandite()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommanditaireId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int CommanditaireId
		{
			get
			{
				return this._CommanditaireId;
			}
			set
			{
				if ((this._CommanditaireId != value))
				{
					if (this._Commanditaire.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommanditaireIdChanging(value);
					this.SendPropertyChanging();
					this._CommanditaireId = value;
					this.SendPropertyChanged("CommanditaireId");
					this.OnCommanditaireIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeCommanditeId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public int TypeCommanditeId
		{
			get
			{
				return this._TypeCommanditeId;
			}
			set
			{
				if ((this._TypeCommanditeId != value))
				{
					if (this._TypeCommandite.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeCommanditeIdChanging(value);
					this.SendPropertyChanging();
					this._TypeCommanditeId = value;
					this.SendPropertyChanged("TypeCommanditeId");
					this.OnTypeCommanditeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Valeur", DbType="Decimal(8,2)", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public System.Nullable<decimal> Valeur
		{
			get
			{
				return this._Valeur;
			}
			set
			{
				if ((this._Valeur != value))
				{
					this.OnValeurChanging(value);
					this.SendPropertyChanging();
					this._Valeur = value;
					this.SendPropertyChanged("Valeur");
					this.OnValeurChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Recu", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public bool Recu
		{
			get
			{
				return this._Recu;
			}
			set
			{
				if ((this._Recu != value))
				{
					this.OnRecuChanging(value);
					this.SendPropertyChanging();
					this._Recu = value;
					this.SendPropertyChanged("Recu");
					this.OnRecuChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Commentaire", DbType="VarChar(250)", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public string Commentaire
		{
			get
			{
				return this._Commentaire;
			}
			set
			{
				if ((this._Commentaire != value))
				{
					this.OnCommentaireChanging(value);
					this.SendPropertyChanging();
					this._Commentaire = value;
					this.SendPropertyChanged("Commentaire");
					this.OnCommentaireChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Commandite_Suivy", Storage="_Suivies", ThisKey="Id", OtherKey="CommanditeId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8, EmitDefaultValue=false)]
		public EntitySet<Suivie> Suivies
		{
			get
			{
				if ((this.serializing 
							&& (this._Suivies.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Suivies;
			}
			set
			{
				this._Suivies.Assign(value);
			}
		}

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Commanditaire_Commandite", Storage = "_Commanditaire", ThisKey = "CommanditaireId", OtherKey = "Id", IsForeignKey = true, DeleteOnNull = true)]
		public Commanditaire Commanditaire
		{
			get
			{
				return this._Commanditaire.Entity;
			}
			set
			{
				Commanditaire previousValue = this._Commanditaire.Entity;
				if (((previousValue != value) 
							|| (this._Commanditaire.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Commanditaire.Entity = null;
						previousValue.Commandites.Remove(this);
					}
					this._Commanditaire.Entity = value;
					if ((value != null))
					{
						value.Commandites.Add(this);
						this._CommanditaireId = value.Id;
					}
					else
					{
						this._CommanditaireId = default(int);
					}
					this.SendPropertyChanged("Commanditaire");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypesCommandite_Commandite", Storage="_TypeCommandite", ThisKey="TypeCommanditeId", OtherKey="Id", IsForeignKey=true)]
		public TypeCommandite TypeCommandite
		{
			get
			{
				return this._TypeCommandite.Entity;
			}
			set
			{
				TypeCommandite previousValue = this._TypeCommandite.Entity;
				if (((previousValue != value) 
							|| (this._TypeCommandite.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeCommandite.Entity = null;
						previousValue.Commandites.Remove(this);
					}
					this._TypeCommandite.Entity = value;
					if ((value != null))
					{
						value.Commandites.Add(this);
						this._TypeCommanditeId = value.Id;
					}
					else
					{
						this._TypeCommanditeId = default(int);
					}
					this.SendPropertyChanged("TypeCommandite");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Suivies(Suivie entity)
		{
			this.SendPropertyChanging();
			entity.Commandite = this;
		}
		
		private void detach_Suivies(Suivie entity)
		{
			this.SendPropertyChanging();
			entity.Commandite = null;
		}
		
		private void Initialize()
		{
			this._Suivies = new EntitySet<Suivie>(new Action<Suivie>(this.attach_Suivies), new Action<Suivie>(this.detach_Suivies));
			this._Commanditaire = default(EntityRef<Commanditaire>);
			this._TypeCommandite = default(EntityRef<TypeCommandite>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="clubs.Evenements")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Evenement : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ClubId;
		
		private string _Nom;
		
		private string _Description;
		
		private System.DateTime _DateDebut;
		
		private System.Nullable<System.DateTime> _DateFin;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<Club> _Club;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnClubIdChanging(int value);
    partial void OnClubIdChanged();
    partial void OnNomChanging(string value);
    partial void OnNomChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnDateDebutChanging(System.DateTime value);
    partial void OnDateDebutChanged();
    partial void OnDateFinChanging(System.Nullable<System.DateTime> value);
    partial void OnDateFinChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public Evenement()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClubId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int ClubId
		{
			get
			{
				return this._ClubId;
			}
			set
			{
				if ((this._ClubId != value))
				{
					if (this._Club.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClubIdChanging(value);
					this.SendPropertyChanging();
					this._ClubId = value;
					this.SendPropertyChanged("ClubId");
					this.OnClubIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nom", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Nom
		{
			get
			{
				return this._Nom;
			}
			set
			{
				if ((this._Nom != value))
				{
					this.OnNomChanging(value);
					this.SendPropertyChanging();
					this._Nom = value;
					this.SendPropertyChanged("Nom");
					this.OnNomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateDebut", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public System.DateTime DateDebut
		{
			get
			{
				return this._DateDebut;
			}
			set
			{
				if ((this._DateDebut != value))
				{
					this.OnDateDebutChanging(value);
					this.SendPropertyChanging();
					this._DateDebut = value;
					this.SendPropertyChanged("DateDebut");
					this.OnDateDebutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateFin", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public System.Nullable<System.DateTime> DateFin
		{
			get
			{
				return this._DateFin;
			}
			set
			{
				if ((this._DateFin != value))
				{
					this.OnDateFinChanging(value);
					this.SendPropertyChanging();
					this._DateFin = value;
					this.SendPropertyChanged("DateFin");
					this.OnDateFinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Club_Evenement", Storage = "_Club", ThisKey = "ClubId", OtherKey = "Id", IsForeignKey = true, DeleteOnNull = true)]
		public Club Club
		{
			get
			{
				return this._Club.Entity;
			}
			set
			{
				Club previousValue = this._Club.Entity;
				if (((previousValue != value) 
							|| (this._Club.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Club.Entity = null;
						previousValue.Evenements.Remove(this);
					}
					this._Club.Entity = value;
					if ((value != null))
					{
						value.Evenements.Add(this);
						this._ClubId = value.Id;
					}
					else
					{
						this._ClubId = default(int);
					}
					this.SendPropertyChanged("Club");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Club = default(EntityRef<Club>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="clubs.Fournisseurs")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Fournisseur : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ClubId;
		
		private int _TypeFournisseurId;
		
		private System.Nullable<int> _AdresseId;
		
		private System.Nullable<int> _ContactId;
		
		private string _Nom;
		
		private string _Commentaire;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<FournisseurItem> _FournisseurItems;
		
		private EntityRef<Club> _Club;
		
		private EntityRef<TypeFournisseur> _TypeFournisseur;
		
		private EntityRef<Adresse> _Adresse;
		
		private EntityRef<Contact> _Contact;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnClubIdChanging(int value);
    partial void OnClubIdChanged();
    partial void OnTypeFournisseurIdChanging(int value);
    partial void OnTypeFournisseurIdChanged();
    partial void OnAdresseIdChanging(System.Nullable<int> value);
    partial void OnAdresseIdChanged();
    partial void OnContactIdChanging(System.Nullable<int> value);
    partial void OnContactIdChanged();
    partial void OnNomChanging(string value);
    partial void OnNomChanged();
    partial void OnCommentaireChanging(string value);
    partial void OnCommentaireChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public Fournisseur()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClubId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int ClubId
		{
			get
			{
				return this._ClubId;
			}
			set
			{
				if ((this._ClubId != value))
				{
					if (this._Club.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClubIdChanging(value);
					this.SendPropertyChanging();
					this._ClubId = value;
					this.SendPropertyChanged("ClubId");
					this.OnClubIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeFournisseurId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public int TypeFournisseurId
		{
			get
			{
				return this._TypeFournisseurId;
			}
			set
			{
				if ((this._TypeFournisseurId != value))
				{
					if (this._TypeFournisseur.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeFournisseurIdChanging(value);
					this.SendPropertyChanging();
					this._TypeFournisseurId = value;
					this.SendPropertyChanged("TypeFournisseurId");
					this.OnTypeFournisseurIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_AdresseId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public System.Nullable<int> AdresseId
		{
			get
			{
				return this._AdresseId;
			}
			set
			{
				if ((this._AdresseId != value))
				{
					if (this._Adresse.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnAdresseIdChanging(value);
					this.SendPropertyChanging();
					this._AdresseId = value;
					this.SendPropertyChanged("AdresseId");
					this.OnAdresseIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public System.Nullable<int> ContactId
		{
			get
			{
				return this._ContactId;
			}
			set
			{
				if ((this._ContactId != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIdChanging(value);
					this.SendPropertyChanging();
					this._ContactId = value;
					this.SendPropertyChanged("ContactId");
					this.OnContactIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nom", DbType="VarChar(100) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public string Nom
		{
			get
			{
				return this._Nom;
			}
			set
			{
				if ((this._Nom != value))
				{
					this.OnNomChanging(value);
					this.SendPropertyChanging();
					this._Nom = value;
					this.SendPropertyChanged("Nom");
					this.OnNomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Commentaire", DbType="VarChar(250)", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public string Commentaire
		{
			get
			{
				return this._Commentaire;
			}
			set
			{
				if ((this._Commentaire != value))
				{
					this.OnCommentaireChanging(value);
					this.SendPropertyChanging();
					this._Commentaire = value;
					this.SendPropertyChanged("Commentaire");
					this.OnCommentaireChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Fournisseur_FournisseursItem", Storage="_FournisseurItems", ThisKey="Id", OtherKey="FournisseurId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=9, EmitDefaultValue=false)]
		public EntitySet<FournisseurItem> FournisseurItems
		{
			get
			{
				if ((this.serializing 
							&& (this._FournisseurItems.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._FournisseurItems;
			}
			set
			{
				this._FournisseurItems.Assign(value);
			}
		}

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Club_Fournisseur", Storage = "_Club", ThisKey = "ClubId", OtherKey = "Id", IsForeignKey = true, DeleteOnNull = true)]
		public Club Club
		{
			get
			{
				return this._Club.Entity;
			}
			set
			{
				Club previousValue = this._Club.Entity;
				if (((previousValue != value) 
							|| (this._Club.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Club.Entity = null;
						previousValue.Fournisseurs.Remove(this);
					}
					this._Club.Entity = value;
					if ((value != null))
					{
						value.Fournisseurs.Add(this);
						this._ClubId = value.Id;
					}
					else
					{
						this._ClubId = default(int);
					}
					this.SendPropertyChanged("Club");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypesFournisseur_Fournisseur", Storage="_TypeFournisseur", ThisKey="TypeFournisseurId", OtherKey="Id", IsForeignKey=true)]
		public TypeFournisseur TypeFournisseur
		{
			get
			{
				return this._TypeFournisseur.Entity;
			}
			set
			{
				TypeFournisseur previousValue = this._TypeFournisseur.Entity;
				if (((previousValue != value) 
							|| (this._TypeFournisseur.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeFournisseur.Entity = null;
						previousValue.Fournisseurs.Remove(this);
					}
					this._TypeFournisseur.Entity = value;
					if ((value != null))
					{
						value.Fournisseurs.Add(this);
						this._TypeFournisseurId = value.Id;
					}
					else
					{
						this._TypeFournisseurId = default(int);
					}
					this.SendPropertyChanged("TypeFournisseur");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adress_Fournisseur", Storage="_Adresse", ThisKey="AdresseId", OtherKey="Id", IsForeignKey=true)]
		public Adresse Adresse
		{
			get
			{
				return this._Adresse.Entity;
			}
			set
			{
				Adresse previousValue = this._Adresse.Entity;
				if (((previousValue != value) 
							|| (this._Adresse.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Adresse.Entity = null;
						previousValue.Fournisseurs.Remove(this);
					}
					this._Adresse.Entity = value;
					if ((value != null))
					{
						value.Fournisseurs.Add(this);
						this._AdresseId = value.Id;
					}
					else
					{
						this._AdresseId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Adresse");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Fournisseur", Storage="_Contact", ThisKey="ContactId", OtherKey="Id", IsForeignKey=true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.Fournisseurs.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.Fournisseurs.Add(this);
						this._ContactId = value.Id;
					}
					else
					{
						this._ContactId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FournisseurItems(FournisseurItem entity)
		{
			this.SendPropertyChanging();
			entity.Fournisseur = this;
		}
		
		private void detach_FournisseurItems(FournisseurItem entity)
		{
			this.SendPropertyChanging();
			entity.Fournisseur = null;
		}
		
		private void Initialize()
		{
			this._FournisseurItems = new EntitySet<FournisseurItem>(new Action<FournisseurItem>(this.attach_FournisseurItems), new Action<FournisseurItem>(this.detach_FournisseurItems));
			this._Club = default(EntityRef<Club>);
			this._TypeFournisseur = default(EntityRef<TypeFournisseur>);
			this._Adresse = default(EntityRef<Adresse>);
			this._Contact = default(EntityRef<Contact>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="clubs.FournisseursItems")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class FournisseurItem : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _FournisseurId;
		
		private int _ItemId;
		
		private string _CodeFournisseur;
		
		private EntityRef<Fournisseur> _Fournisseur;
		
		private EntityRef<Item> _Item;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnFournisseurIdChanging(int value);
    partial void OnFournisseurIdChanged();
    partial void OnItemIdChanging(int value);
    partial void OnItemIdChanged();
    partial void OnCodeFournisseurChanging(string value);
    partial void OnCodeFournisseurChanged();
    #endregion
		
		public FournisseurItem()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_FournisseurId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int FournisseurId
		{
			get
			{
				return this._FournisseurId;
			}
			set
			{
				if ((this._FournisseurId != value))
				{
					if (this._Fournisseur.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnFournisseurIdChanging(value);
					this.SendPropertyChanging();
					this._FournisseurId = value;
					this.SendPropertyChanged("FournisseurId");
					this.OnFournisseurIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ItemId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int ItemId
		{
			get
			{
				return this._ItemId;
			}
			set
			{
				if ((this._ItemId != value))
				{
					if (this._Item.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnItemIdChanging(value);
					this.SendPropertyChanging();
					this._ItemId = value;
					this.SendPropertyChanged("ItemId");
					this.OnItemIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodeFournisseur", DbType="VarChar(20) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string CodeFournisseur
		{
			get
			{
				return this._CodeFournisseur;
			}
			set
			{
				if ((this._CodeFournisseur != value))
				{
					this.OnCodeFournisseurChanging(value);
					this.SendPropertyChanging();
					this._CodeFournisseur = value;
					this.SendPropertyChanged("CodeFournisseur");
					this.OnCodeFournisseurChanged();
				}
			}
		}

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Fournisseur_FournisseursItem", Storage = "_Fournisseur", ThisKey = "FournisseurId", OtherKey = "Id", IsForeignKey = true, DeleteOnNull = true)]
		public Fournisseur Fournisseur
		{
			get
			{
				return this._Fournisseur.Entity;
			}
			set
			{
				Fournisseur previousValue = this._Fournisseur.Entity;
				if (((previousValue != value) 
							|| (this._Fournisseur.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Fournisseur.Entity = null;
						previousValue.FournisseurItems.Remove(this);
					}
					this._Fournisseur.Entity = value;
					if ((value != null))
					{
						value.FournisseurItems.Add(this);
						this._FournisseurId = value.Id;
					}
					else
					{
						this._FournisseurId = default(int);
					}
					this.SendPropertyChanged("Fournisseur");
				}
			}
		}

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Item_FournisseursItem", Storage = "_Item", ThisKey = "ItemId", OtherKey = "Id", IsForeignKey = true, DeleteOnNull = true)]
		public Item Item
		{
			get
			{
				return this._Item.Entity;
			}
			set
			{
				Item previousValue = this._Item.Entity;
				if (((previousValue != value) 
							|| (this._Item.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Item.Entity = null;
						previousValue.FournisseurItems.Remove(this);
					}
					this._Item.Entity = value;
					if ((value != null))
					{
						value.FournisseurItems.Add(this);
						this._ItemId = value.Id;
					}
					else
					{
						this._ItemId = default(int);
					}
					this.SendPropertyChanged("Item");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Fournisseur = default(EntityRef<Fournisseur>);
			this._Item = default(EntityRef<Item>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="clubs.Groupes")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Groupe : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ClubId;
		
		private string _Nom;
		
		private string _Description;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<GroupeMembre> _GroupeMembres;
		
		private EntityRef<Club> _Club;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnClubIdChanging(int value);
    partial void OnClubIdChanged();
    partial void OnNomChanging(string value);
    partial void OnNomChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public Groupe()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClubId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int ClubId
		{
			get
			{
				return this._ClubId;
			}
			set
			{
				if ((this._ClubId != value))
				{
					if (this._Club.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClubIdChanging(value);
					this.SendPropertyChanging();
					this._ClubId = value;
					this.SendPropertyChanged("ClubId");
					this.OnClubIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nom", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Nom
		{
			get
			{
				return this._Nom;
			}
			set
			{
				if ((this._Nom != value))
				{
					this.OnNomChanging(value);
					this.SendPropertyChanging();
					this._Nom = value;
					this.SendPropertyChanged("Nom");
					this.OnNomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(250)", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Groupe_GroupesMembre", Storage="_GroupeMembres", ThisKey="Id", OtherKey="GroupeId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6, EmitDefaultValue=false)]
		public EntitySet<GroupeMembre> GroupeMembres
		{
			get
			{
				if ((this.serializing 
							&& (this._GroupeMembres.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._GroupeMembres;
			}
			set
			{
				this._GroupeMembres.Assign(value);
			}
		}

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Club_Groupe", Storage = "_Club", ThisKey = "ClubId", OtherKey = "Id", IsForeignKey = true, DeleteOnNull = true)]
		public Club Club
		{
			get
			{
				return this._Club.Entity;
			}
			set
			{
				Club previousValue = this._Club.Entity;
				if (((previousValue != value) 
							|| (this._Club.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Club.Entity = null;
						previousValue.Groupes.Remove(this);
					}
					this._Club.Entity = value;
					if ((value != null))
					{
						value.Groupes.Add(this);
						this._ClubId = value.Id;
					}
					else
					{
						this._ClubId = default(int);
					}
					this.SendPropertyChanged("Club");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GroupeMembres(GroupeMembre entity)
		{
			this.SendPropertyChanging();
			entity.Groupe = this;
		}
		
		private void detach_GroupeMembres(GroupeMembre entity)
		{
			this.SendPropertyChanging();
			entity.Groupe = null;
		}
		
		private void Initialize()
		{
			this._GroupeMembres = new EntitySet<GroupeMembre>(new Action<GroupeMembre>(this.attach_GroupeMembres), new Action<GroupeMembre>(this.detach_GroupeMembres));
			this._Club = default(EntityRef<Club>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="clubs.GroupesMembres")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class GroupeMembre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _GroupeId;
		
		private int _MembreId;
		
		private EntityRef<Groupe> _Groupe;
		
		private EntityRef<Membre> _Membre;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnGroupeIdChanging(int value);
    partial void OnGroupeIdChanged();
    partial void OnMembreIdChanging(int value);
    partial void OnMembreIdChanged();
    #endregion
		
		public GroupeMembre()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_GroupeId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int GroupeId
		{
			get
			{
				return this._GroupeId;
			}
			set
			{
				if ((this._GroupeId != value))
				{
					if (this._Groupe.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnGroupeIdChanging(value);
					this.SendPropertyChanging();
					this._GroupeId = value;
					this.SendPropertyChanged("GroupeId");
					this.OnGroupeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MembreId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int MembreId
		{
			get
			{
				return this._MembreId;
			}
			set
			{
				if ((this._MembreId != value))
				{
					if (this._Membre.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMembreIdChanging(value);
					this.SendPropertyChanging();
					this._MembreId = value;
					this.SendPropertyChanged("MembreId");
					this.OnMembreIdChanged();
				}
			}
		}

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Groupe_GroupesMembre", Storage = "_Groupe", ThisKey = "GroupeId", OtherKey = "Id", IsForeignKey = true, DeleteOnNull = true)]
		public Groupe Groupe
		{
			get
			{
				return this._Groupe.Entity;
			}
			set
			{
				Groupe previousValue = this._Groupe.Entity;
				if (((previousValue != value) 
							|| (this._Groupe.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Groupe.Entity = null;
						previousValue.GroupeMembres.Remove(this);
					}
					this._Groupe.Entity = value;
					if ((value != null))
					{
						value.GroupeMembres.Add(this);
						this._GroupeId = value.Id;
					}
					else
					{
						this._GroupeId = default(int);
					}
					this.SendPropertyChanged("Groupe");
				}
			}
		}

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Membre_GroupesMembre", Storage = "_Membre", ThisKey = "MembreId", OtherKey = "Id", IsForeignKey = true, DeleteOnNull = true)]
		public Membre Membre
		{
			get
			{
				return this._Membre.Entity;
			}
			set
			{
				Membre previousValue = this._Membre.Entity;
				if (((previousValue != value) 
							|| (this._Membre.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Membre.Entity = null;
						previousValue.GroupeMembres.Remove(this);
					}
					this._Membre.Entity = value;
					if ((value != null))
					{
						value.GroupeMembres.Add(this);
						this._MembreId = value.Id;
					}
					else
					{
						this._MembreId = default(int);
					}
					this.SendPropertyChanged("Membre");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Groupe = default(EntityRef<Groupe>);
			this._Membre = default(EntityRef<Membre>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="clubs.Items")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Item : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ClubId;
		
		private int _UniteId;
		
		private string _Code;
		
		private string _Description;
		
		private decimal _Quantite;
		
		private System.Nullable<decimal> _QuantiteMin;
		
		private System.Nullable<decimal> _QuantiteMax;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<FournisseurItem> _FournisseurItems;
		
		private EntityRef<Club> _Club;
		
		private EntityRef<Unite> _Unite;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnClubIdChanging(int value);
    partial void OnClubIdChanged();
    partial void OnUniteIdChanging(int value);
    partial void OnUniteIdChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnQuantiteChanging(decimal value);
    partial void OnQuantiteChanged();
    partial void OnQuantiteMinChanging(System.Nullable<decimal> value);
    partial void OnQuantiteMinChanged();
    partial void OnQuantiteMaxChanging(System.Nullable<decimal> value);
    partial void OnQuantiteMaxChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public Item()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClubId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int ClubId
		{
			get
			{
				return this._ClubId;
			}
			set
			{
				if ((this._ClubId != value))
				{
					if (this._Club.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClubIdChanging(value);
					this.SendPropertyChanging();
					this._ClubId = value;
					this.SendPropertyChanged("ClubId");
					this.OnClubIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_UniteId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public int UniteId
		{
			get
			{
				return this._UniteId;
			}
			set
			{
				if ((this._UniteId != value))
				{
					if (this._Unite.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnUniteIdChanging(value);
					this.SendPropertyChanging();
					this._UniteId = value;
					this.SendPropertyChanged("UniteId");
					this.OnUniteIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="VarChar(20)", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Quantite", DbType="Decimal(6,3) NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public decimal Quantite
		{
			get
			{
				return this._Quantite;
			}
			set
			{
				if ((this._Quantite != value))
				{
					this.OnQuantiteChanging(value);
					this.SendPropertyChanging();
					this._Quantite = value;
					this.SendPropertyChanged("Quantite");
					this.OnQuantiteChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuantiteMin", DbType="Decimal(6,3)", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public System.Nullable<decimal> QuantiteMin
		{
			get
			{
				return this._QuantiteMin;
			}
			set
			{
				if ((this._QuantiteMin != value))
				{
					this.OnQuantiteMinChanging(value);
					this.SendPropertyChanging();
					this._QuantiteMin = value;
					this.SendPropertyChanged("QuantiteMin");
					this.OnQuantiteMinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_QuantiteMax", DbType="Decimal(6,3)", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8)]
		public System.Nullable<decimal> QuantiteMax
		{
			get
			{
				return this._QuantiteMax;
			}
			set
			{
				if ((this._QuantiteMax != value))
				{
					this.OnQuantiteMaxChanging(value);
					this.SendPropertyChanging();
					this._QuantiteMax = value;
					this.SendPropertyChanged("QuantiteMax");
					this.OnQuantiteMaxChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=9)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Item_FournisseursItem", Storage="_FournisseurItems", ThisKey="Id", OtherKey="ItemId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=10, EmitDefaultValue=false)]
		public EntitySet<FournisseurItem> FournisseurItems
		{
			get
			{
				if ((this.serializing 
							&& (this._FournisseurItems.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._FournisseurItems;
			}
			set
			{
				this._FournisseurItems.Assign(value);
			}
		}

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Club_Item", Storage = "_Club", ThisKey = "ClubId", OtherKey = "Id", IsForeignKey = true, DeleteOnNull = true)]
		public Club Club
		{
			get
			{
				return this._Club.Entity;
			}
			set
			{
				Club previousValue = this._Club.Entity;
				if (((previousValue != value) 
							|| (this._Club.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Club.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._Club.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._ClubId = value.Id;
					}
					else
					{
						this._ClubId = default(int);
					}
					this.SendPropertyChanged("Club");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Unite_Item", Storage="_Unite", ThisKey="UniteId", OtherKey="Id", IsForeignKey=true)]
		public Unite Unite
		{
			get
			{
				return this._Unite.Entity;
			}
			set
			{
				Unite previousValue = this._Unite.Entity;
				if (((previousValue != value) 
							|| (this._Unite.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Unite.Entity = null;
						previousValue.Items.Remove(this);
					}
					this._Unite.Entity = value;
					if ((value != null))
					{
						value.Items.Add(this);
						this._UniteId = value.Id;
					}
					else
					{
						this._UniteId = default(int);
					}
					this.SendPropertyChanged("Unite");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_FournisseurItems(FournisseurItem entity)
		{
			this.SendPropertyChanging();
			entity.Item = this;
		}
		
		private void detach_FournisseurItems(FournisseurItem entity)
		{
			this.SendPropertyChanging();
			entity.Item = null;
		}
		
		private void Initialize()
		{
			this._FournisseurItems = new EntitySet<FournisseurItem>(new Action<FournisseurItem>(this.attach_FournisseurItems), new Action<FournisseurItem>(this.detach_FournisseurItems));
			this._Club = default(EntityRef<Club>);
			this._Unite = default(EntityRef<Unite>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="clubs.Meetings")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Meeting : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ClubId;
		
		private int _ConvocateurId;
		
		private System.DateTime _DateDebut;
		
		private System.DateTime _DateFin;
		
		private string _Commentaire;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<MeetingMembre> _MeetingMembres;
		
		private EntityRef<Club> _Club;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnClubIdChanging(int value);
    partial void OnClubIdChanged();
    partial void OnConvocateurIdChanging(int value);
    partial void OnConvocateurIdChanged();
    partial void OnDateDebutChanging(System.DateTime value);
    partial void OnDateDebutChanged();
    partial void OnDateFinChanging(System.DateTime value);
    partial void OnDateFinChanged();
    partial void OnCommentaireChanging(string value);
    partial void OnCommentaireChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public Meeting()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClubId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int ClubId
		{
			get
			{
				return this._ClubId;
			}
			set
			{
				if ((this._ClubId != value))
				{
					if (this._Club.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClubIdChanging(value);
					this.SendPropertyChanging();
					this._ClubId = value;
					this.SendPropertyChanged("ClubId");
					this.OnClubIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConvocateurId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public int ConvocateurId
		{
			get
			{
				return this._ConvocateurId;
			}
			set
			{
				if ((this._ConvocateurId != value))
				{
					this.OnConvocateurIdChanging(value);
					this.SendPropertyChanging();
					this._ConvocateurId = value;
					this.SendPropertyChanged("ConvocateurId");
					this.OnConvocateurIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateDebut", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public System.DateTime DateDebut
		{
			get
			{
				return this._DateDebut;
			}
			set
			{
				if ((this._DateDebut != value))
				{
					this.OnDateDebutChanging(value);
					this.SendPropertyChanging();
					this._DateDebut = value;
					this.SendPropertyChanged("DateDebut");
					this.OnDateDebutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateFin", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public System.DateTime DateFin
		{
			get
			{
				return this._DateFin;
			}
			set
			{
				if ((this._DateFin != value))
				{
					this.OnDateFinChanging(value);
					this.SendPropertyChanging();
					this._DateFin = value;
					this.SendPropertyChanged("DateFin");
					this.OnDateFinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Commentaire", DbType="VarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public string Commentaire
		{
			get
			{
				return this._Commentaire;
			}
			set
			{
				if ((this._Commentaire != value))
				{
					this.OnCommentaireChanging(value);
					this.SendPropertyChanging();
					this._Commentaire = value;
					this.SendPropertyChanged("Commentaire");
					this.OnCommentaireChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Meeting_MeetingsMembre", Storage="_MeetingMembres", ThisKey="Id", OtherKey="MeetingId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8, EmitDefaultValue=false)]
		public EntitySet<MeetingMembre> MeetingMembres
		{
			get
			{
				if ((this.serializing 
							&& (this._MeetingMembres.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._MeetingMembres;
			}
			set
			{
				this._MeetingMembres.Assign(value);
			}
		}

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Club_Meeting", Storage = "_Club", ThisKey = "ClubId", OtherKey = "Id", IsForeignKey = true, DeleteOnNull = true)]
		public Club Club
		{
			get
			{
				return this._Club.Entity;
			}
			set
			{
				Club previousValue = this._Club.Entity;
				if (((previousValue != value) 
							|| (this._Club.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Club.Entity = null;
						previousValue.Meetings.Remove(this);
					}
					this._Club.Entity = value;
					if ((value != null))
					{
						value.Meetings.Add(this);
						this._ClubId = value.Id;
					}
					else
					{
						this._ClubId = default(int);
					}
					this.SendPropertyChanged("Club");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_MeetingMembres(MeetingMembre entity)
		{
			this.SendPropertyChanging();
			entity.Meeting = this;
		}
		
		private void detach_MeetingMembres(MeetingMembre entity)
		{
			this.SendPropertyChanging();
			entity.Meeting = null;
		}
		
		private void Initialize()
		{
			this._MeetingMembres = new EntitySet<MeetingMembre>(new Action<MeetingMembre>(this.attach_MeetingMembres), new Action<MeetingMembre>(this.detach_MeetingMembres));
			this._Club = default(EntityRef<Club>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="clubs.MeetingsMembres")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class MeetingMembre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _MeetingId;
		
		private int _MembreId;
		
		private bool _PresenceRequise;
		
		private EntityRef<Meeting> _Meeting;
		
		private EntityRef<Membre> _Membre;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnMeetingIdChanging(int value);
    partial void OnMeetingIdChanged();
    partial void OnMembreIdChanging(int value);
    partial void OnMembreIdChanged();
    partial void OnPresenceRequiseChanging(bool value);
    partial void OnPresenceRequiseChanged();
    #endregion
		
		public MeetingMembre()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MeetingId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int MeetingId
		{
			get
			{
				return this._MeetingId;
			}
			set
			{
				if ((this._MeetingId != value))
				{
					if (this._Meeting.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMeetingIdChanging(value);
					this.SendPropertyChanging();
					this._MeetingId = value;
					this.SendPropertyChanged("MeetingId");
					this.OnMeetingIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MembreId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int MembreId
		{
			get
			{
				return this._MembreId;
			}
			set
			{
				if ((this._MembreId != value))
				{
					if (this._Membre.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMembreIdChanging(value);
					this.SendPropertyChanging();
					this._MembreId = value;
					this.SendPropertyChanged("MembreId");
					this.OnMembreIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_PresenceRequise", DbType="Bit NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public bool PresenceRequise
		{
			get
			{
				return this._PresenceRequise;
			}
			set
			{
				if ((this._PresenceRequise != value))
				{
					this.OnPresenceRequiseChanging(value);
					this.SendPropertyChanging();
					this._PresenceRequise = value;
					this.SendPropertyChanged("PresenceRequise");
					this.OnPresenceRequiseChanged();
				}
			}
		}

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Meeting_MeetingsMembre", Storage = "_Meeting", ThisKey = "MeetingId", OtherKey = "Id", IsForeignKey = true, DeleteOnNull = true)]
		public Meeting Meeting
		{
			get
			{
				return this._Meeting.Entity;
			}
			set
			{
				Meeting previousValue = this._Meeting.Entity;
				if (((previousValue != value) 
							|| (this._Meeting.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Meeting.Entity = null;
						previousValue.MeetingMembres.Remove(this);
					}
					this._Meeting.Entity = value;
					if ((value != null))
					{
						value.MeetingMembres.Add(this);
						this._MeetingId = value.Id;
					}
					else
					{
						this._MeetingId = default(int);
					}
					this.SendPropertyChanged("Meeting");
				}
			}
		}

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Membre_MeetingsMembre", Storage = "_Membre", ThisKey = "MembreId", OtherKey = "Id", IsForeignKey = true, DeleteOnNull = true)]
		public Membre Membre
		{
			get
			{
				return this._Membre.Entity;
			}
			set
			{
				Membre previousValue = this._Membre.Entity;
				if (((previousValue != value) 
							|| (this._Membre.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Membre.Entity = null;
						previousValue.MeetingMembres.Remove(this);
					}
					this._Membre.Entity = value;
					if ((value != null))
					{
						value.MeetingMembres.Add(this);
						this._MembreId = value.Id;
					}
					else
					{
						this._MembreId = default(int);
					}
					this.SendPropertyChanged("Membre");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Meeting = default(EntityRef<Meeting>);
			this._Membre = default(EntityRef<Membre>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="clubs.Membres")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Membre : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ClubId;
		
		private string _CodeUniversel;
		
		private string _Titre;
		
		private System.DateTime _DateDebut;
		
		private System.Nullable<System.DateTime> _DateFin;
		
		private bool _Actif;
		
		private EntitySet<GroupeMembre> _GroupeMembres;
		
		private EntitySet<MeetingMembre> _MeetingMembres;
		
		private EntitySet<Suivie> _Suivies;
		
		private EntityRef<Club> _Club;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnClubIdChanging(int value);
    partial void OnClubIdChanged();
    partial void OnCodeUniverselChanging(string value);
    partial void OnCodeUniverselChanged();
    partial void OnTitreChanging(string value);
    partial void OnTitreChanged();
    partial void OnDateDebutChanging(System.DateTime value);
    partial void OnDateDebutChanged();
    partial void OnDateFinChanging(System.Nullable<System.DateTime> value);
    partial void OnDateFinChanged();
    partial void OnActifChanging(bool value);
    partial void OnActifChanged();
    #endregion
		
		public Membre()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ClubId", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int ClubId
		{
			get
			{
				return this._ClubId;
			}
			set
			{
				if ((this._ClubId != value))
				{
					if (this._Club.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnClubIdChanging(value);
					this.SendPropertyChanging();
					this._ClubId = value;
					this.SendPropertyChanged("ClubId");
					this.OnClubIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodeUniversel", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string CodeUniversel
		{
			get
			{
				return this._CodeUniversel;
			}
			set
			{
				if ((this._CodeUniversel != value))
				{
					this.OnCodeUniverselChanging(value);
					this.SendPropertyChanging();
					this._CodeUniversel = value;
					this.SendPropertyChanged("CodeUniversel");
					this.OnCodeUniverselChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Titre", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string Titre
		{
			get
			{
				return this._Titre;
			}
			set
			{
				if ((this._Titre != value))
				{
					this.OnTitreChanging(value);
					this.SendPropertyChanging();
					this._Titre = value;
					this.SendPropertyChanged("Titre");
					this.OnTitreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateDebut", DbType="DateTime NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public System.DateTime DateDebut
		{
			get
			{
				return this._DateDebut;
			}
			set
			{
				if ((this._DateDebut != value))
				{
					this.OnDateDebutChanging(value);
					this.SendPropertyChanging();
					this._DateDebut = value;
					this.SendPropertyChanged("DateDebut");
					this.OnDateDebutChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateFin", DbType="DateTime")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public System.Nullable<System.DateTime> DateFin
		{
			get
			{
				return this._DateFin;
			}
			set
			{
				if ((this._DateFin != value))
				{
					this.OnDateFinChanging(value);
					this.SendPropertyChanging();
					this._DateFin = value;
					this.SendPropertyChanged("DateFin");
					this.OnDateFinChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Actif", DbType="Bit NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public bool Actif
		{
			get
			{
				return this._Actif;
			}
			set
			{
				if ((this._Actif != value))
				{
					this.OnActifChanging(value);
					this.SendPropertyChanging();
					this._Actif = value;
					this.SendPropertyChanged("Actif");
					this.OnActifChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Membre_GroupesMembre", Storage="_GroupeMembres", ThisKey="Id", OtherKey="MembreId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8, EmitDefaultValue=false)]
		public EntitySet<GroupeMembre> GroupeMembres
		{
			get
			{
				if ((this.serializing 
							&& (this._GroupeMembres.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._GroupeMembres;
			}
			set
			{
				this._GroupeMembres.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Membre_MeetingsMembre", Storage="_MeetingMembres", ThisKey="Id", OtherKey="MembreId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=9, EmitDefaultValue=false)]
		public EntitySet<MeetingMembre> MeetingMembres
		{
			get
			{
				if ((this.serializing 
							&& (this._MeetingMembres.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._MeetingMembres;
			}
			set
			{
				this._MeetingMembres.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Membre_Suivy", Storage="_Suivies", ThisKey="Id", OtherKey="MembreId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=10, EmitDefaultValue=false)]
		public EntitySet<Suivie> Suivies
		{
			get
			{
				if ((this.serializing 
							&& (this._Suivies.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Suivies;
			}
			set
			{
				this._Suivies.Assign(value);
			}
		}

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Club_Membre", Storage = "_Club", ThisKey = "ClubId", OtherKey = "Id", IsForeignKey = true, DeleteOnNull = true)]
		public Club Club
		{
			get
			{
				return this._Club.Entity;
			}
			set
			{
				Club previousValue = this._Club.Entity;
				if (((previousValue != value) 
							|| (this._Club.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Club.Entity = null;
						previousValue.Membres.Remove(this);
					}
					this._Club.Entity = value;
					if ((value != null))
					{
						value.Membres.Add(this);
						this._ClubId = value.Id;
					}
					else
					{
						this._ClubId = default(int);
					}
					this.SendPropertyChanged("Club");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_GroupeMembres(GroupeMembre entity)
		{
			this.SendPropertyChanging();
			entity.Membre = this;
		}
		
		private void detach_GroupeMembres(GroupeMembre entity)
		{
			this.SendPropertyChanging();
			entity.Membre = null;
		}
		
		private void attach_MeetingMembres(MeetingMembre entity)
		{
			this.SendPropertyChanging();
			entity.Membre = this;
		}
		
		private void detach_MeetingMembres(MeetingMembre entity)
		{
			this.SendPropertyChanging();
			entity.Membre = null;
		}
		
		private void attach_Suivies(Suivie entity)
		{
			this.SendPropertyChanging();
			entity.Membre = this;
		}
		
		private void detach_Suivies(Suivie entity)
		{
			this.SendPropertyChanging();
			entity.Membre = null;
		}
		
		private void Initialize()
		{
			this._GroupeMembres = new EntitySet<GroupeMembre>(new Action<GroupeMembre>(this.attach_GroupeMembres), new Action<GroupeMembre>(this.detach_GroupeMembres));
			this._MeetingMembres = new EntitySet<MeetingMembre>(new Action<MeetingMembre>(this.attach_MeetingMembres), new Action<MeetingMembre>(this.detach_MeetingMembres));
			this._Suivies = new EntitySet<Suivie>(new Action<Suivie>(this.attach_Suivies), new Action<Suivie>(this.detach_Suivies));
			this._Club = default(EntityRef<Club>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="clubs.StatutsSuivie")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class StatutSuivie : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Code;
		
		private string _Description;
		
		private EntitySet<Suivie> _Suivies;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public StatutSuivie()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatutsSuivie_Suivy", Storage="_Suivies", ThisKey="Id", OtherKey="StatutSuivieId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4, EmitDefaultValue=false)]
		public EntitySet<Suivie> Suivies
		{
			get
			{
				if ((this.serializing 
							&& (this._Suivies.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Suivies;
			}
			set
			{
				this._Suivies.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Suivies(Suivie entity)
		{
			this.SendPropertyChanging();
			entity.StatutSuivie = this;
		}
		
		private void detach_Suivies(Suivie entity)
		{
			this.SendPropertyChanging();
			entity.StatutSuivie = null;
		}
		
		private void Initialize()
		{
			this._Suivies = new EntitySet<Suivie>(new Action<Suivie>(this.attach_Suivies), new Action<Suivie>(this.detach_Suivies));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="clubs.Suivies")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Suivie : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _CommanditeId;
		
		private System.Nullable<int> _MembreId;
		
		private int _StatutSuivieId;
		
		private System.DateTime _DateSuivie;
		
		private string _Commentaire;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<Commandite> _Commandite;
		
		private EntityRef<Membre> _Membre;
		
		private EntityRef<StatutSuivie> _StatutSuivie;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCommanditeIdChanging(int value);
    partial void OnCommanditeIdChanged();
    partial void OnMembreIdChanging(System.Nullable<int> value);
    partial void OnMembreIdChanged();
    partial void OnStatutSuivieIdChanging(int value);
    partial void OnStatutSuivieIdChanged();
    partial void OnDateSuivieChanging(System.DateTime value);
    partial void OnDateSuivieChanged();
    partial void OnCommentaireChanging(string value);
    partial void OnCommentaireChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public Suivie()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CommanditeId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int CommanditeId
		{
			get
			{
				return this._CommanditeId;
			}
			set
			{
				if ((this._CommanditeId != value))
				{
					if (this._Commandite.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnCommanditeIdChanging(value);
					this.SendPropertyChanging();
					this._CommanditeId = value;
					this.SendPropertyChanged("CommanditeId");
					this.OnCommanditeIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_MembreId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public System.Nullable<int> MembreId
		{
			get
			{
				return this._MembreId;
			}
			set
			{
				if ((this._MembreId != value))
				{
					if (this._Membre.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnMembreIdChanging(value);
					this.SendPropertyChanging();
					this._MembreId = value;
					this.SendPropertyChanged("MembreId");
					this.OnMembreIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_StatutSuivieId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public int StatutSuivieId
		{
			get
			{
				return this._StatutSuivieId;
			}
			set
			{
				if ((this._StatutSuivieId != value))
				{
					if (this._StatutSuivie.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnStatutSuivieIdChanging(value);
					this.SendPropertyChanging();
					this._StatutSuivieId = value;
					this.SendPropertyChanged("StatutSuivieId");
					this.OnStatutSuivieIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateSuivie", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public System.DateTime DateSuivie
		{
			get
			{
				return this._DateSuivie;
			}
			set
			{
				if ((this._DateSuivie != value))
				{
					this.OnDateSuivieChanging(value);
					this.SendPropertyChanging();
					this._DateSuivie = value;
					this.SendPropertyChanged("DateSuivie");
					this.OnDateSuivieChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Commentaire", DbType="VarChar(250) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public string Commentaire
		{
			get
			{
				return this._Commentaire;
			}
			set
			{
				if ((this._Commentaire != value))
				{
					this.OnCommentaireChanging(value);
					this.SendPropertyChanging();
					this._Commentaire = value;
					this.SendPropertyChanged("Commentaire");
					this.OnCommentaireChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Commandite_Suivy", Storage = "_Commandite", ThisKey = "CommanditeId", OtherKey = "Id", IsForeignKey = true, DeleteOnNull = true)]
		public Commandite Commandite
		{
			get
			{
				return this._Commandite.Entity;
			}
			set
			{
				Commandite previousValue = this._Commandite.Entity;
				if (((previousValue != value) 
							|| (this._Commandite.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Commandite.Entity = null;
						previousValue.Suivies.Remove(this);
					}
					this._Commandite.Entity = value;
					if ((value != null))
					{
						value.Suivies.Add(this);
						this._CommanditeId = value.Id;
					}
					else
					{
						this._CommanditeId = default(int);
					}
					this.SendPropertyChanged("Commandite");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Membre_Suivy", Storage="_Membre", ThisKey="MembreId", OtherKey="Id", IsForeignKey=true)]
		public Membre Membre
		{
			get
			{
				return this._Membre.Entity;
			}
			set
			{
				Membre previousValue = this._Membre.Entity;
				if (((previousValue != value) 
							|| (this._Membre.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Membre.Entity = null;
						previousValue.Suivies.Remove(this);
					}
					this._Membre.Entity = value;
					if ((value != null))
					{
						value.Suivies.Add(this);
						this._MembreId = value.Id;
					}
					else
					{
						this._MembreId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Membre");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="StatutsSuivie_Suivy", Storage="_StatutSuivie", ThisKey="StatutSuivieId", OtherKey="Id", IsForeignKey=true)]
		public StatutSuivie StatutSuivie
		{
			get
			{
				return this._StatutSuivie.Entity;
			}
			set
			{
				StatutSuivie previousValue = this._StatutSuivie.Entity;
				if (((previousValue != value) 
							|| (this._StatutSuivie.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._StatutSuivie.Entity = null;
						previousValue.Suivies.Remove(this);
					}
					this._StatutSuivie.Entity = value;
					if ((value != null))
					{
						value.Suivies.Add(this);
						this._StatutSuivieId = value.Id;
					}
					else
					{
						this._StatutSuivieId = default(int);
					}
					this.SendPropertyChanged("StatutSuivie");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Commandite = default(EntityRef<Commandite>);
			this._Membre = default(EntityRef<Membre>);
			this._StatutSuivie = default(EntityRef<StatutSuivie>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="clubs.TypesCommanditaire")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class TypeCommanditaire : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Nom;
		
		private string _Description;
		
		private EntitySet<Commanditaire> _Commanditaires;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNomChanging(string value);
    partial void OnNomChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public TypeCommanditaire()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nom", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Nom
		{
			get
			{
				return this._Nom;
			}
			set
			{
				if ((this._Nom != value))
				{
					this.OnNomChanging(value);
					this.SendPropertyChanging();
					this._Nom = value;
					this.SendPropertyChanged("Nom");
					this.OnNomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypesCommanditaire_Commanditaire", Storage="_Commanditaires", ThisKey="Id", OtherKey="TypeCommanditaireId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4, EmitDefaultValue=false)]
		public EntitySet<Commanditaire> Commanditaires
		{
			get
			{
				if ((this.serializing 
							&& (this._Commanditaires.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Commanditaires;
			}
			set
			{
				this._Commanditaires.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Commanditaires(Commanditaire entity)
		{
			this.SendPropertyChanging();
			entity.TypeCommanditaire = this;
		}
		
		private void detach_Commanditaires(Commanditaire entity)
		{
			this.SendPropertyChanging();
			entity.TypeCommanditaire = null;
		}
		
		private void Initialize()
		{
			this._Commanditaires = new EntitySet<Commanditaire>(new Action<Commanditaire>(this.attach_Commanditaires), new Action<Commanditaire>(this.detach_Commanditaires));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="clubs.TypesCommandite")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class TypeCommandite : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Nom;
		
		private string _Description;
		
		private EntitySet<Commandite> _Commandites;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNomChanging(string value);
    partial void OnNomChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public TypeCommandite()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nom", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Nom
		{
			get
			{
				return this._Nom;
			}
			set
			{
				if ((this._Nom != value))
				{
					this.OnNomChanging(value);
					this.SendPropertyChanging();
					this._Nom = value;
					this.SendPropertyChanged("Nom");
					this.OnNomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypesCommandite_Commandite", Storage="_Commandites", ThisKey="Id", OtherKey="TypeCommanditeId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4, EmitDefaultValue=false)]
		public EntitySet<Commandite> Commandites
		{
			get
			{
				if ((this.serializing 
							&& (this._Commandites.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Commandites;
			}
			set
			{
				this._Commandites.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Commandites(Commandite entity)
		{
			this.SendPropertyChanging();
			entity.TypeCommandite = this;
		}
		
		private void detach_Commandites(Commandite entity)
		{
			this.SendPropertyChanging();
			entity.TypeCommandite = null;
		}
		
		private void Initialize()
		{
			this._Commandites = new EntitySet<Commandite>(new Action<Commandite>(this.attach_Commandites), new Action<Commandite>(this.detach_Commandites));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="clubs.TypesFournisseur")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class TypeFournisseur : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Nom;
		
		private string _Description;
		
		private EntitySet<Fournisseur> _Fournisseurs;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNomChanging(string value);
    partial void OnNomChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public TypeFournisseur()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nom", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Nom
		{
			get
			{
				return this._Nom;
			}
			set
			{
				if ((this._Nom != value))
				{
					this.OnNomChanging(value);
					this.SendPropertyChanging();
					this._Nom = value;
					this.SendPropertyChanged("Nom");
					this.OnNomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypesFournisseur_Fournisseur", Storage="_Fournisseurs", ThisKey="Id", OtherKey="TypeFournisseurId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4, EmitDefaultValue=false)]
		public EntitySet<Fournisseur> Fournisseurs
		{
			get
			{
				if ((this.serializing 
							&& (this._Fournisseurs.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Fournisseurs;
			}
			set
			{
				this._Fournisseurs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Fournisseurs(Fournisseur entity)
		{
			this.SendPropertyChanging();
			entity.TypeFournisseur = this;
		}
		
		private void detach_Fournisseurs(Fournisseur entity)
		{
			this.SendPropertyChanging();
			entity.TypeFournisseur = null;
		}
		
		private void Initialize()
		{
			this._Fournisseurs = new EntitySet<Fournisseur>(new Action<Fournisseur>(this.attach_Fournisseurs), new Action<Fournisseur>(this.detach_Fournisseurs));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Adresses")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Adresse : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _NoCivique;
		
		private string _Rue;
		
		private string _Appartement;
		
		private string _Ville;
		
		private string _CodePostal;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<Commanditaire> _Commanditaires;
		
		private EntitySet<Fournisseur> _Fournisseurs;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNoCiviqueChanging(System.Nullable<int> value);
    partial void OnNoCiviqueChanged();
    partial void OnRueChanging(string value);
    partial void OnRueChanged();
    partial void OnAppartementChanging(string value);
    partial void OnAppartementChanged();
    partial void OnVilleChanging(string value);
    partial void OnVilleChanged();
    partial void OnCodePostalChanging(string value);
    partial void OnCodePostalChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public Adresse()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_NoCivique", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public System.Nullable<int> NoCivique
		{
			get
			{
				return this._NoCivique;
			}
			set
			{
				if ((this._NoCivique != value))
				{
					this.OnNoCiviqueChanging(value);
					this.SendPropertyChanging();
					this._NoCivique = value;
					this.SendPropertyChanged("NoCivique");
					this.OnNoCiviqueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Rue", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Rue
		{
			get
			{
				return this._Rue;
			}
			set
			{
				if ((this._Rue != value))
				{
					this.OnRueChanging(value);
					this.SendPropertyChanging();
					this._Rue = value;
					this.SendPropertyChanged("Rue");
					this.OnRueChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Appartement", DbType="VarChar(10)", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string Appartement
		{
			get
			{
				return this._Appartement;
			}
			set
			{
				if ((this._Appartement != value))
				{
					this.OnAppartementChanging(value);
					this.SendPropertyChanging();
					this._Appartement = value;
					this.SendPropertyChanged("Appartement");
					this.OnAppartementChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Ville", DbType="VarChar(150)", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public string Ville
		{
			get
			{
				return this._Ville;
			}
			set
			{
				if ((this._Ville != value))
				{
					this.OnVilleChanging(value);
					this.SendPropertyChanging();
					this._Ville = value;
					this.SendPropertyChanged("Ville");
					this.OnVilleChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodePostal", DbType="VarChar(16)", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public string CodePostal
		{
			get
			{
				return this._CodePostal;
			}
			set
			{
				if ((this._CodePostal != value))
				{
					this.OnCodePostalChanging(value);
					this.SendPropertyChanging();
					this._CodePostal = value;
					this.SendPropertyChanged("CodePostal");
					this.OnCodePostalChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adress_Commanditaire", Storage="_Commanditaires", ThisKey="Id", OtherKey="AdresseId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8, EmitDefaultValue=false)]
		public EntitySet<Commanditaire> Commanditaires
		{
			get
			{
				if ((this.serializing 
							&& (this._Commanditaires.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Commanditaires;
			}
			set
			{
				this._Commanditaires.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Adress_Fournisseur", Storage="_Fournisseurs", ThisKey="Id", OtherKey="AdresseId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=9, EmitDefaultValue=false)]
		public EntitySet<Fournisseur> Fournisseurs
		{
			get
			{
				if ((this.serializing 
							&& (this._Fournisseurs.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Fournisseurs;
			}
			set
			{
				this._Fournisseurs.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Commanditaires(Commanditaire entity)
		{
			this.SendPropertyChanging();
			entity.Adresse = this;
		}
		
		private void detach_Commanditaires(Commanditaire entity)
		{
			this.SendPropertyChanging();
			entity.Adresse = null;
		}
		
		private void attach_Fournisseurs(Fournisseur entity)
		{
			this.SendPropertyChanging();
			entity.Adresse = this;
		}
		
		private void detach_Fournisseurs(Fournisseur entity)
		{
			this.SendPropertyChanging();
			entity.Adresse = null;
		}
		
		private void Initialize()
		{
			this._Commanditaires = new EntitySet<Commanditaire>(new Action<Commanditaire>(this.attach_Commanditaires), new Action<Commanditaire>(this.detach_Commanditaires));
			this._Fournisseurs = new EntitySet<Fournisseur>(new Action<Fournisseur>(this.attach_Fournisseurs), new Action<Fournisseur>(this.detach_Fournisseurs));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Concentrations")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Concentration : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Acronyme;
		
		private string _Description;
		
		private EntitySet<Profil> _Profils;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnAcronymeChanging(string value);
    partial void OnAcronymeChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public Concentration()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Acronyme", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Acronyme
		{
			get
			{
				return this._Acronyme;
			}
			set
			{
				if ((this._Acronyme != value))
				{
					this.OnAcronymeChanging(value);
					this.SendPropertyChanging();
					this._Acronyme = value;
					this.SendPropertyChanged("Acronyme");
					this.OnAcronymeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(150)")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concentration_Profil", Storage="_Profils", ThisKey="Id", OtherKey="ConcentrationId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4, EmitDefaultValue=false)]
		public EntitySet<Profil> Profils
		{
			get
			{
				if ((this.serializing 
							&& (this._Profils.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Profils;
			}
			set
			{
				this._Profils.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Profils(Profil entity)
		{
			this.SendPropertyChanging();
			entity.Concentration = this;
		}
		
		private void detach_Profils(Profil entity)
		{
			this.SendPropertyChanging();
			entity.Concentration = null;
		}
		
		private void Initialize()
		{
			this._Profils = new EntitySet<Profil>(new Action<Profil>(this.attach_Profils), new Action<Profil>(this.detach_Profils));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Contacts")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Contact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _TypeContactId;
		
		private string _Nom;
		
		private string _Prenom;
		
		private string _Telephone;
		
		private string _Courriel;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<Commanditaire> _Commanditaires;
		
		private EntitySet<Fournisseur> _Fournisseurs;
		
		private EntitySet<ContactUrgence> _ContactUrgences;
		
		private EntityRef<TypeContact> _TypeContact;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnTypeContactIdChanging(int value);
    partial void OnTypeContactIdChanged();
    partial void OnNomChanging(string value);
    partial void OnNomChanged();
    partial void OnPrenomChanging(string value);
    partial void OnPrenomChanged();
    partial void OnTelephoneChanging(string value);
    partial void OnTelephoneChanged();
    partial void OnCourrielChanging(string value);
    partial void OnCourrielChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public Contact()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeContactId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int TypeContactId
		{
			get
			{
				return this._TypeContactId;
			}
			set
			{
				if ((this._TypeContactId != value))
				{
					if (this._TypeContact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeContactIdChanging(value);
					this.SendPropertyChanging();
					this._TypeContactId = value;
					this.SendPropertyChanged("TypeContactId");
					this.OnTypeContactIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nom", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Nom
		{
			get
			{
				return this._Nom;
			}
			set
			{
				if ((this._Nom != value))
				{
					this.OnNomChanging(value);
					this.SendPropertyChanging();
					this._Nom = value;
					this.SendPropertyChanged("Nom");
					this.OnNomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prenom", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string Prenom
		{
			get
			{
				return this._Prenom;
			}
			set
			{
				if ((this._Prenom != value))
				{
					this.OnPrenomChanging(value);
					this.SendPropertyChanging();
					this._Prenom = value;
					this.SendPropertyChanged("Prenom");
					this.OnPrenomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Telephone", DbType="VarChar(20)", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public string Telephone
		{
			get
			{
				return this._Telephone;
			}
			set
			{
				if ((this._Telephone != value))
				{
					this.OnTelephoneChanging(value);
					this.SendPropertyChanging();
					this._Telephone = value;
					this.SendPropertyChanged("Telephone");
					this.OnTelephoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Courriel", DbType="VarChar(250)", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public string Courriel
		{
			get
			{
				return this._Courriel;
			}
			set
			{
				if ((this._Courriel != value))
				{
					this.OnCourrielChanging(value);
					this.SendPropertyChanging();
					this._Courriel = value;
					this.SendPropertyChanged("Courriel");
					this.OnCourrielChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Commanditaire", Storage="_Commanditaires", ThisKey="Id", OtherKey="ContactId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8, EmitDefaultValue=false)]
		public EntitySet<Commanditaire> Commanditaires
		{
			get
			{
				if ((this.serializing 
							&& (this._Commanditaires.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Commanditaires;
			}
			set
			{
				this._Commanditaires.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_Fournisseur", Storage="_Fournisseurs", ThisKey="Id", OtherKey="ContactId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=9, EmitDefaultValue=false)]
		public EntitySet<Fournisseur> Fournisseurs
		{
			get
			{
				if ((this.serializing 
							&& (this._Fournisseurs.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Fournisseurs;
			}
			set
			{
				this._Fournisseurs.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_ContactsUrgence", Storage="_ContactUrgences", ThisKey="Id", OtherKey="ContactId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=10, EmitDefaultValue=false)]
		public EntitySet<ContactUrgence> ContactUrgences
		{
			get
			{
				if ((this.serializing 
							&& (this._ContactUrgences.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ContactUrgences;
			}
			set
			{
				this._ContactUrgences.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypesContact_Contact", Storage="_TypeContact", ThisKey="TypeContactId", OtherKey="Id", IsForeignKey=true)]
		public TypeContact TypeContact
		{
			get
			{
				return this._TypeContact.Entity;
			}
			set
			{
				TypeContact previousValue = this._TypeContact.Entity;
				if (((previousValue != value) 
							|| (this._TypeContact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeContact.Entity = null;
						previousValue.Contacts.Remove(this);
					}
					this._TypeContact.Entity = value;
					if ((value != null))
					{
						value.Contacts.Add(this);
						this._TypeContactId = value.Id;
					}
					else
					{
						this._TypeContactId = default(int);
					}
					this.SendPropertyChanged("TypeContact");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Commanditaires(Commanditaire entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_Commanditaires(Commanditaire entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_Fournisseurs(Fournisseur entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_Fournisseurs(Fournisseur entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void attach_ContactUrgences(ContactUrgence entity)
		{
			this.SendPropertyChanging();
			entity.Contact = this;
		}
		
		private void detach_ContactUrgences(ContactUrgence entity)
		{
			this.SendPropertyChanging();
			entity.Contact = null;
		}
		
		private void Initialize()
		{
			this._Commanditaires = new EntitySet<Commanditaire>(new Action<Commanditaire>(this.attach_Commanditaires), new Action<Commanditaire>(this.detach_Commanditaires));
			this._Fournisseurs = new EntitySet<Fournisseur>(new Action<Fournisseur>(this.attach_Fournisseurs), new Action<Fournisseur>(this.detach_Fournisseurs));
			this._ContactUrgences = new EntitySet<ContactUrgence>(new Action<ContactUrgence>(this.attach_ContactUrgences), new Action<ContactUrgence>(this.detach_ContactUrgences));
			this._TypeContact = default(EntityRef<TypeContact>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.TypesContact")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class TypeContact : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Nom;
		
		private EntitySet<Contact> _Contacts;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNomChanging(string value);
    partial void OnNomChanged();
    #endregion
		
		public TypeContact()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nom", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Nom
		{
			get
			{
				return this._Nom;
			}
			set
			{
				if ((this._Nom != value))
				{
					this.OnNomChanging(value);
					this.SendPropertyChanging();
					this._Nom = value;
					this.SendPropertyChanged("Nom");
					this.OnNomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypesContact_Contact", Storage="_Contacts", ThisKey="Id", OtherKey="TypeContactId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3, EmitDefaultValue=false)]
		public EntitySet<Contact> Contacts
		{
			get
			{
				if ((this.serializing 
							&& (this._Contacts.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Contacts;
			}
			set
			{
				this._Contacts.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.TypeContact = this;
		}
		
		private void detach_Contacts(Contact entity)
		{
			this.SendPropertyChanging();
			entity.TypeContact = null;
		}
		
		private void Initialize()
		{
			this._Contacts = new EntitySet<Contact>(new Action<Contact>(this.attach_Contacts), new Action<Contact>(this.detach_Contacts));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="dbo.Unites")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Unite : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Code;
		
		private string _Systeme;
		
		private EntitySet<Item> _Items;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnCodeChanging(string value);
    partial void OnCodeChanged();
    partial void OnSystemeChanging(string value);
    partial void OnSystemeChanged();
    #endregion
		
		public Unite()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Code", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Code
		{
			get
			{
				return this._Code;
			}
			set
			{
				if ((this._Code != value))
				{
					this.OnCodeChanging(value);
					this.SendPropertyChanging();
					this._Code = value;
					this.SendPropertyChanged("Code");
					this.OnCodeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Systeme", DbType="VarChar(10) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Systeme
		{
			get
			{
				return this._Systeme;
			}
			set
			{
				if ((this._Systeme != value))
				{
					this.OnSystemeChanging(value);
					this.SendPropertyChanging();
					this._Systeme = value;
					this.SendPropertyChanged("Systeme");
					this.OnSystemeChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Unite_Item", Storage="_Items", ThisKey="Id", OtherKey="UniteId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4, EmitDefaultValue=false)]
		public EntitySet<Item> Items
		{
			get
			{
				if ((this.serializing 
							&& (this._Items.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Items;
			}
			set
			{
				this._Items.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Unite = this;
		}
		
		private void detach_Items(Item entity)
		{
			this.SendPropertyChanging();
			entity.Unite = null;
		}
		
		private void Initialize()
		{
			this._Items = new EntitySet<Item>(new Action<Item>(this.attach_Items), new Action<Item>(this.detach_Items));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="userspace.Antecedents")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Antecedent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ProfilId;
		
		private int _TypeAntecedentId;
		
		private string _Description;
		
		private bool _Public;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<Profil> _Profil;
		
		private EntityRef<TypeAntecedent> _TypeAntecedent;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnProfilIdChanging(int value);
    partial void OnProfilIdChanged();
    partial void OnTypeAntecedentIdChanging(int value);
    partial void OnTypeAntecedentIdChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPublicChanging(bool value);
    partial void OnPublicChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public Antecedent()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfilId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int ProfilId
		{
			get
			{
				return this._ProfilId;
			}
			set
			{
				if ((this._ProfilId != value))
				{
					if (this._Profil.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProfilIdChanging(value);
					this.SendPropertyChanging();
					this._ProfilId = value;
					this.SendPropertyChanged("ProfilId");
					this.OnProfilIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_TypeAntecedentId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public int TypeAntecedentId
		{
			get
			{
				return this._TypeAntecedentId;
			}
			set
			{
				if ((this._TypeAntecedentId != value))
				{
					if (this._TypeAntecedent.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnTypeAntecedentIdChanging(value);
					this.SendPropertyChanging();
					this._TypeAntecedentId = value;
					this.SendPropertyChanged("TypeAntecedentId");
					this.OnTypeAntecedentIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(150) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Public]", Storage="_Public", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public bool Public
		{
			get
			{
				return this._Public;
			}
			set
			{
				if ((this._Public != value))
				{
					this.OnPublicChanging(value);
					this.SendPropertyChanging();
					this._Public = value;
					this.SendPropertyChanged("Public");
					this.OnPublicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Profil_Antecedent", Storage="_Profil", ThisKey="ProfilId", OtherKey="Id", IsForeignKey=true, DeleteOnNull = true)]
		public Profil Profil
		{
			get
			{
				return this._Profil.Entity;
			}
			set
			{
				Profil previousValue = this._Profil.Entity;
				if (((previousValue != value) 
							|| (this._Profil.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Profil.Entity = null;
						previousValue.Antecedents.Remove(this);
					}
					this._Profil.Entity = value;
					if ((value != null))
					{
						value.Antecedents.Add(this);
						this._ProfilId = value.Id;
					}
					else
					{
						this._ProfilId = default(int);
					}
					this.SendPropertyChanged("Profil");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypesAntecedent_Antecedent", Storage="_TypeAntecedent", ThisKey="TypeAntecedentId", OtherKey="Id", IsForeignKey=true)]
		public TypeAntecedent TypeAntecedent
		{
			get
			{
				return this._TypeAntecedent.Entity;
			}
			set
			{
				TypeAntecedent previousValue = this._TypeAntecedent.Entity;
				if (((previousValue != value) 
							|| (this._TypeAntecedent.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._TypeAntecedent.Entity = null;
						previousValue.Antecedents.Remove(this);
					}
					this._TypeAntecedent.Entity = value;
					if ((value != null))
					{
						value.Antecedents.Add(this);
						this._TypeAntecedentId = value.Id;
					}
					else
					{
						this._TypeAntecedentId = default(int);
					}
					this.SendPropertyChanged("TypeAntecedent");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Profil = default(EntityRef<Profil>);
			this._TypeAntecedent = default(EntityRef<TypeAntecedent>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="userspace.ContactsUrgence")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class ContactUrgence : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProfilId;
		
		private int _ContactId;
		
		private bool _Public;
		
		private EntityRef<Contact> _Contact;
		
		private EntityRef<Profil> _Profil;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProfilIdChanging(int value);
    partial void OnProfilIdChanged();
    partial void OnContactIdChanging(int value);
    partial void OnContactIdChanged();
    partial void OnPublicChanging(bool value);
    partial void OnPublicChanged();
    #endregion
		
		public ContactUrgence()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfilId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int ProfilId
		{
			get
			{
				return this._ProfilId;
			}
			set
			{
				if ((this._ProfilId != value))
				{
					if (this._Profil.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProfilIdChanging(value);
					this.SendPropertyChanging();
					this._ProfilId = value;
					this.SendPropertyChanged("ProfilId");
					this.OnProfilIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ContactId", DbType="Int NOT NULL", IsPrimaryKey=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int ContactId
		{
			get
			{
				return this._ContactId;
			}
			set
			{
				if ((this._ContactId != value))
				{
					if (this._Contact.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnContactIdChanging(value);
					this.SendPropertyChanging();
					this._ContactId = value;
					this.SendPropertyChanged("ContactId");
					this.OnContactIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Public]", Storage="_Public", DbType="Bit NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public bool Public
		{
			get
			{
				return this._Public;
			}
			set
			{
				if ((this._Public != value))
				{
					this.OnPublicChanging(value);
					this.SendPropertyChanging();
					this._Public = value;
					this.SendPropertyChanged("Public");
					this.OnPublicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Contact_ContactsUrgence", Storage="_Contact", ThisKey="ContactId", OtherKey="Id", IsForeignKey=true, DeleteOnNull = true)]
		public Contact Contact
		{
			get
			{
				return this._Contact.Entity;
			}
			set
			{
				Contact previousValue = this._Contact.Entity;
				if (((previousValue != value) 
							|| (this._Contact.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Contact.Entity = null;
						previousValue.ContactUrgences.Remove(this);
					}
					this._Contact.Entity = value;
					if ((value != null))
					{
						value.ContactUrgences.Add(this);
						this._ContactId = value.Id;
					}
					else
					{
						this._ContactId = default(int);
					}
					this.SendPropertyChanged("Contact");
				}
			}
		}

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Profil_ContactsUrgence", Storage = "_Profil", ThisKey = "ProfilId", OtherKey = "Id", IsForeignKey = true, DeleteOnNull = true)]
		public Profil Profil
		{
			get
			{
				return this._Profil.Entity;
			}
			set
			{
				Profil previousValue = this._Profil.Entity;
				if (((previousValue != value) 
							|| (this._Profil.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Profil.Entity = null;
						previousValue.ContactUrgences.Remove(this);
					}
					this._Profil.Entity = value;
					if ((value != null))
					{
						value.ContactUrgences.Add(this);
						this._ProfilId = value.Id;
					}
					else
					{
						this._ProfilId = default(int);
					}
					this.SendPropertyChanged("Profil");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Contact = default(EntityRef<Contact>);
			this._Profil = default(EntityRef<Profil>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="userspace.Formations")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Formation : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ProfilId;
		
		private string _Titre;
		
		private string _Description;
		
		private bool _Public;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<Profil> _Profil;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnProfilIdChanging(int value);
    partial void OnProfilIdChanged();
    partial void OnTitreChanging(string value);
    partial void OnTitreChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    partial void OnPublicChanging(bool value);
    partial void OnPublicChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public Formation()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfilId", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int ProfilId
		{
			get
			{
				return this._ProfilId;
			}
			set
			{
				if ((this._ProfilId != value))
				{
					if (this._Profil.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProfilIdChanging(value);
					this.SendPropertyChanging();
					this._ProfilId = value;
					this.SendPropertyChanged("ProfilId");
					this.OnProfilIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Titre", DbType="VarChar(50) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Titre
		{
			get
			{
				return this._Titre;
			}
			set
			{
				if ((this._Titre != value))
				{
					this.OnTitreChanging(value);
					this.SendPropertyChanging();
					this._Titre = value;
					this.SendPropertyChanged("Titre");
					this.OnTitreChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(150)", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Public]", Storage="_Public", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public bool Public
		{
			get
			{
				return this._Public;
			}
			set
			{
				if ((this._Public != value))
				{
					this.OnPublicChanging(value);
					this.SendPropertyChanging();
					this._Public = value;
					this.SendPropertyChanged("Public");
					this.OnPublicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Profil_Formation", Storage = "_Profil", ThisKey = "ProfilId", OtherKey = "Id", IsForeignKey = true, DeleteOnNull = true)]
		public Profil Profil
		{
			get
			{
				return this._Profil.Entity;
			}
			set
			{
				Profil previousValue = this._Profil.Entity;
				if (((previousValue != value) 
							|| (this._Profil.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Profil.Entity = null;
						previousValue.Formations.Remove(this);
					}
					this._Profil.Entity = value;
					if ((value != null))
					{
						value.Formations.Add(this);
						this._ProfilId = value.Id;
					}
					else
					{
						this._ProfilId = default(int);
					}
					this.SendPropertyChanged("Profil");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Profil = default(EntityRef<Profil>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="userspace.Preferences")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Preference : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private int _ProfilId;
		
		private string _Name;
		
		private string _Value;
		
		private EntityRef<Profil> _Profil;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnProfilIdChanging(int value);
    partial void OnProfilIdChanged();
    partial void OnNameChanging(string value);
    partial void OnNameChanged();
    partial void OnValueChanging(string value);
    partial void OnValueChanged();
    #endregion
		
		public Preference()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfilId", DbType="Int NOT NULL")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public int ProfilId
		{
			get
			{
				return this._ProfilId;
			}
			set
			{
				if ((this._ProfilId != value))
				{
					if (this._Profil.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProfilIdChanging(value);
					this.SendPropertyChanging();
					this._ProfilId = value;
					this.SendPropertyChanged("ProfilId");
					this.OnProfilIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Name", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Name
		{
			get
			{
				return this._Name;
			}
			set
			{
				if ((this._Name != value))
				{
					this.OnNameChanging(value);
					this.SendPropertyChanging();
					this._Name = value;
					this.SendPropertyChanged("Name");
					this.OnNameChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Value", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string Value
		{
			get
			{
				return this._Value;
			}
			set
			{
				if ((this._Value != value))
				{
					this.OnValueChanging(value);
					this.SendPropertyChanging();
					this._Value = value;
					this.SendPropertyChanged("Value");
					this.OnValueChanged();
				}
			}
		}

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Profil_Preference", Storage = "_Profil", ThisKey = "ProfilId", OtherKey = "Id", IsForeignKey = true, DeleteOnNull = true)]
		public Profil Profil
		{
			get
			{
				return this._Profil.Entity;
			}
			set
			{
				Profil previousValue = this._Profil.Entity;
				if (((previousValue != value) 
							|| (this._Profil.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Profil.Entity = null;
						previousValue.Preferences.Remove(this);
					}
					this._Profil.Entity = value;
					if ((value != null))
					{
						value.Preferences.Add(this);
						this._ProfilId = value.Id;
					}
					else
					{
						this._ProfilId = default(int);
					}
					this.SendPropertyChanged("Profil");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Profil = default(EntityRef<Profil>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="userspace.Profils")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class Profil : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private System.Nullable<int> _ConcentrationId;
		
		private string _CodeUniversel;
		
		private string _Nom;
		
		private string _Prenom;
		
		private System.Data.Linq.Binary _Avatar;
		
		private int _Xp;
		
		private bool _Actif;
		
		private bool _Public;
		
		private System.DateTime _DateCreation;
		
		private System.Data.Linq.Binary _Version;
		
		private EntitySet<Antecedent> _Antecedents;
		
		private EntitySet<ContactUrgence> _ContactUrgences;
		
		private EntitySet<Formation> _Formations;
		
		private EntitySet<Preference> _Preferences;
		
		private EntityRef<ProfilAvance> _ProfilAvance;
		
		private EntityRef<Concentration> _Concentration;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnConcentrationIdChanging(System.Nullable<int> value);
    partial void OnConcentrationIdChanged();
    partial void OnCodeUniverselChanging(string value);
    partial void OnCodeUniverselChanged();
    partial void OnNomChanging(string value);
    partial void OnNomChanged();
    partial void OnPrenomChanging(string value);
    partial void OnPrenomChanged();
    partial void OnAvatarChanging(System.Data.Linq.Binary value);
    partial void OnAvatarChanged();
    partial void OnXpChanging(int value);
    partial void OnXpChanged();
    partial void OnActifChanging(bool value);
    partial void OnActifChanged();
    partial void OnPublicChanging(bool value);
    partial void OnPublicChanged();
    partial void OnDateCreationChanging(System.DateTime value);
    partial void OnDateCreationChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public Profil()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ConcentrationId", DbType="Int", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public System.Nullable<int> ConcentrationId
		{
			get
			{
				return this._ConcentrationId;
			}
			set
			{
				if ((this._ConcentrationId != value))
				{
					if (this._Concentration.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnConcentrationIdChanging(value);
					this.SendPropertyChanging();
					this._ConcentrationId = value;
					this.SendPropertyChanged("ConcentrationId");
					this.OnConcentrationIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodeUniversel", DbType="VarChar(10) NOT NULL", CanBeNull=false, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string CodeUniversel
		{
			get
			{
				return this._CodeUniversel;
			}
			set
			{
				if ((this._CodeUniversel != value))
				{
					this.OnCodeUniverselChanging(value);
					this.SendPropertyChanging();
					this._CodeUniversel = value;
					this.SendPropertyChanged("CodeUniversel");
					this.OnCodeUniverselChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nom", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string Nom
		{
			get
			{
				return this._Nom;
			}
			set
			{
				if ((this._Nom != value))
				{
					this.OnNomChanging(value);
					this.SendPropertyChanging();
					this._Nom = value;
					this.SendPropertyChanged("Nom");
					this.OnNomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Prenom", DbType="VarChar(50)", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public string Prenom
		{
			get
			{
				return this._Prenom;
			}
			set
			{
				if ((this._Prenom != value))
				{
					this.OnPrenomChanging(value);
					this.SendPropertyChanging();
					this._Prenom = value;
					this.SendPropertyChanged("Prenom");
					this.OnPrenomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Avatar", DbType="VarBinary(4000)", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public System.Data.Linq.Binary Avatar
		{
			get
			{
				return this._Avatar;
			}
			set
			{
				if ((this._Avatar != value))
				{
					this.OnAvatarChanging(value);
					this.SendPropertyChanging();
					this._Avatar = value;
					this.SendPropertyChanged("Avatar");
					this.OnAvatarChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Xp", DbType="Int NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public int Xp
		{
			get
			{
				return this._Xp;
			}
			set
			{
				if ((this._Xp != value))
				{
					this.OnXpChanging(value);
					this.SendPropertyChanging();
					this._Xp = value;
					this.SendPropertyChanged("Xp");
					this.OnXpChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Actif", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=8)]
		public bool Actif
		{
			get
			{
				return this._Actif;
			}
			set
			{
				if ((this._Actif != value))
				{
					this.OnActifChanging(value);
					this.SendPropertyChanging();
					this._Actif = value;
					this.SendPropertyChanged("Actif");
					this.OnActifChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Public]", Storage="_Public", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=9)]
		public bool Public
		{
			get
			{
				return this._Public;
			}
			set
			{
				if ((this._Public != value))
				{
					this.OnPublicChanging(value);
					this.SendPropertyChanging();
					this._Public = value;
					this.SendPropertyChanged("Public");
					this.OnPublicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateCreation", DbType="DateTime NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=10)]
		public System.DateTime DateCreation
		{
			get
			{
				return this._DateCreation;
			}
			set
			{
				if ((this._DateCreation != value))
				{
					this.OnDateCreationChanging(value);
					this.SendPropertyChanging();
					this._DateCreation = value;
					this.SendPropertyChanged("DateCreation");
					this.OnDateCreationChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=11)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Profil_Antecedent", Storage="_Antecedents", ThisKey="Id", OtherKey="ProfilId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=12, EmitDefaultValue=false)]
		public EntitySet<Antecedent> Antecedents
		{
			get
			{
				if ((this.serializing 
							&& (this._Antecedents.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Antecedents;
			}
			set
			{
				this._Antecedents.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Profil_ContactsUrgence", Storage="_ContactUrgences", ThisKey="Id", OtherKey="ProfilId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=13, EmitDefaultValue=false)]
		public EntitySet<ContactUrgence> ContactUrgences
		{
			get
			{
				if ((this.serializing 
							&& (this._ContactUrgences.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._ContactUrgences;
			}
			set
			{
				this._ContactUrgences.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Profil_Formation", Storage="_Formations", ThisKey="Id", OtherKey="ProfilId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=14, EmitDefaultValue=false)]
		public EntitySet<Formation> Formations
		{
			get
			{
				if ((this.serializing 
							&& (this._Formations.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Formations;
			}
			set
			{
				this._Formations.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Profil_Preference", Storage="_Preferences", ThisKey="Id", OtherKey="ProfilId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=15, EmitDefaultValue=false)]
		public EntitySet<Preference> Preferences
		{
			get
			{
				if ((this.serializing 
							&& (this._Preferences.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Preferences;
			}
			set
			{
				this._Preferences.Assign(value);
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Profil_ProfilsAvance", Storage="_ProfilAvance", ThisKey="Id", OtherKey="ProfilId", IsUnique=true, IsForeignKey=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=16, EmitDefaultValue=false)]
		public ProfilAvance ProfilAvance
		{
			get
			{
				if ((this.serializing 
							&& (this._ProfilAvance.HasLoadedOrAssignedValue == false)))
				{
					return null;
				}
				return this._ProfilAvance.Entity;
			}
			set
			{
				ProfilAvance previousValue = this._ProfilAvance.Entity;
				if (((previousValue != value) 
							|| (this._ProfilAvance.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._ProfilAvance.Entity = null;
						previousValue.Profil = null;
					}
					this._ProfilAvance.Entity = value;
					if ((value != null))
					{
						value.Profil = this;
					}
					this.SendPropertyChanged("ProfilAvance");
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="Concentration_Profil", Storage="_Concentration", ThisKey="ConcentrationId", OtherKey="Id", IsForeignKey=true)]
		public Concentration Concentration
		{
			get
			{
				return this._Concentration.Entity;
			}
			set
			{
				Concentration previousValue = this._Concentration.Entity;
				if (((previousValue != value) 
							|| (this._Concentration.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Concentration.Entity = null;
						previousValue.Profils.Remove(this);
					}
					this._Concentration.Entity = value;
					if ((value != null))
					{
						value.Profils.Add(this);
						this._ConcentrationId = value.Id;
					}
					else
					{
						this._ConcentrationId = default(Nullable<int>);
					}
					this.SendPropertyChanged("Concentration");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Antecedents(Antecedent entity)
		{
			this.SendPropertyChanging();
			entity.Profil = this;
		}
		
		private void detach_Antecedents(Antecedent entity)
		{
			this.SendPropertyChanging();
			entity.Profil = null;
		}
		
		private void attach_ContactUrgences(ContactUrgence entity)
		{
			this.SendPropertyChanging();
			entity.Profil = this;
		}
		
		private void detach_ContactUrgences(ContactUrgence entity)
		{
			this.SendPropertyChanging();
			entity.Profil = null;
		}
		
		private void attach_Formations(Formation entity)
		{
			this.SendPropertyChanging();
			entity.Profil = this;
		}
		
		private void detach_Formations(Formation entity)
		{
			this.SendPropertyChanging();
			entity.Profil = null;
		}
		
		private void attach_Preferences(Preference entity)
		{
			this.SendPropertyChanging();
			entity.Profil = this;
		}
		
		private void detach_Preferences(Preference entity)
		{
			this.SendPropertyChanging();
			entity.Profil = null;
		}
		
		private void Initialize()
		{
			this._Antecedents = new EntitySet<Antecedent>(new Action<Antecedent>(this.attach_Antecedents), new Action<Antecedent>(this.detach_Antecedents));
			this._ContactUrgences = new EntitySet<ContactUrgence>(new Action<ContactUrgence>(this.attach_ContactUrgences), new Action<ContactUrgence>(this.detach_ContactUrgences));
			this._Formations = new EntitySet<Formation>(new Action<Formation>(this.attach_Formations), new Action<Formation>(this.detach_Formations));
			this._Preferences = new EntitySet<Preference>(new Action<Preference>(this.attach_Preferences), new Action<Preference>(this.detach_Preferences));
			this._ProfilAvance = default(EntityRef<ProfilAvance>);
			this._Concentration = default(EntityRef<Concentration>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="userspace.ProfilsAvances")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class ProfilAvance : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _ProfilId;
		
		private string _CodePermanent;
		
		private System.Nullable<System.DateTime> _DateNaissance;
		
		private string _Courriel;
		
		private string _Telephone;
		
		private bool _Public;
		
		private System.Data.Linq.Binary _Version;
		
		private EntityRef<Profil> _Profil;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnProfilIdChanging(int value);
    partial void OnProfilIdChanged();
    partial void OnCodePermanentChanging(string value);
    partial void OnCodePermanentChanged();
    partial void OnDateNaissanceChanging(System.Nullable<System.DateTime> value);
    partial void OnDateNaissanceChanged();
    partial void OnCourrielChanging(string value);
    partial void OnCourrielChanged();
    partial void OnTelephoneChanging(string value);
    partial void OnTelephoneChanged();
    partial void OnPublicChanging(bool value);
    partial void OnPublicChanged();
    partial void OnVersionChanging(System.Data.Linq.Binary value);
    partial void OnVersionChanged();
    #endregion
		
		public ProfilAvance()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_ProfilId", DbType="Int NOT NULL", IsPrimaryKey=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int ProfilId
		{
			get
			{
				return this._ProfilId;
			}
			set
			{
				if ((this._ProfilId != value))
				{
					if (this._Profil.HasLoadedOrAssignedValue)
					{
						throw new System.Data.Linq.ForeignKeyReferenceAlreadyHasValueException();
					}
					this.OnProfilIdChanging(value);
					this.SendPropertyChanging();
					this._ProfilId = value;
					this.SendPropertyChanged("ProfilId");
					this.OnProfilIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_CodePermanent", DbType="VarChar(12)", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string CodePermanent
		{
			get
			{
				return this._CodePermanent;
			}
			set
			{
				if ((this._CodePermanent != value))
				{
					this.OnCodePermanentChanging(value);
					this.SendPropertyChanging();
					this._CodePermanent = value;
					this.SendPropertyChanged("CodePermanent");
					this.OnCodePermanentChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_DateNaissance", DbType="DateTime", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public System.Nullable<System.DateTime> DateNaissance
		{
			get
			{
				return this._DateNaissance;
			}
			set
			{
				if ((this._DateNaissance != value))
				{
					this.OnDateNaissanceChanging(value);
					this.SendPropertyChanging();
					this._DateNaissance = value;
					this.SendPropertyChanged("DateNaissance");
					this.OnDateNaissanceChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Courriel", DbType="VarChar(250)", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4)]
		public string Courriel
		{
			get
			{
				return this._Courriel;
			}
			set
			{
				if ((this._Courriel != value))
				{
					this.OnCourrielChanging(value);
					this.SendPropertyChanging();
					this._Courriel = value;
					this.SendPropertyChanged("Courriel");
					this.OnCourrielChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Telephone", DbType="VarChar(20)", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=5)]
		public string Telephone
		{
			get
			{
				return this._Telephone;
			}
			set
			{
				if ((this._Telephone != value))
				{
					this.OnTelephoneChanging(value);
					this.SendPropertyChanging();
					this._Telephone = value;
					this.SendPropertyChanged("Telephone");
					this.OnTelephoneChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Name="[Public]", Storage="_Public", DbType="Bit NOT NULL", UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=6)]
		public bool Public
		{
			get
			{
				return this._Public;
			}
			set
			{
				if ((this._Public != value))
				{
					this.OnPublicChanging(value);
					this.SendPropertyChanging();
					this._Public = value;
					this.SendPropertyChanged("Public");
					this.OnPublicChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Version", AutoSync=AutoSync.Always, DbType="rowversion NOT NULL", CanBeNull=false, IsDbGenerated=true, IsVersion=true, UpdateCheck=UpdateCheck.Never)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=7)]
		public System.Data.Linq.Binary Version
		{
			get
			{
				return this._Version;
			}
			set
			{
				if ((this._Version != value))
				{
					this.OnVersionChanging(value);
					this.SendPropertyChanging();
					this._Version = value;
					this.SendPropertyChanged("Version");
					this.OnVersionChanged();
				}
			}
		}

        [global::System.Data.Linq.Mapping.AssociationAttribute(Name = "Profil_ProfilsAvance", Storage = "_Profil", ThisKey = "ProfilId", OtherKey = "Id", IsForeignKey = true, DeleteOnNull = true)]
		public Profil Profil
		{
			get
			{
				return this._Profil.Entity;
			}
			set
			{
				Profil previousValue = this._Profil.Entity;
				if (((previousValue != value) 
							|| (this._Profil.HasLoadedOrAssignedValue == false)))
				{
					this.SendPropertyChanging();
					if ((previousValue != null))
					{
						this._Profil.Entity = null;
						previousValue.ProfilAvance = null;
					}
					this._Profil.Entity = value;
					if ((value != null))
					{
						value.ProfilAvance = this;
						this._ProfilId = value.Id;
					}
					else
					{
						this._ProfilId = default(int);
					}
					this.SendPropertyChanged("Profil");
				}
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void Initialize()
		{
			this._Profil = default(EntityRef<Profil>);
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
	}
	
	[global::System.Data.Linq.Mapping.TableAttribute(Name="userspace.TypesAntecedent")]
	[global::System.Runtime.Serialization.DataContractAttribute()]
	public partial class TypeAntecedent : INotifyPropertyChanging, INotifyPropertyChanged
	{
		
		private static PropertyChangingEventArgs emptyChangingEventArgs = new PropertyChangingEventArgs(String.Empty);
		
		private int _Id;
		
		private string _Nom;
		
		private string _Description;
		
		private EntitySet<Antecedent> _Antecedents;
		
		private bool serializing;
		
    #region Extensibility Method Definitions
    partial void OnLoaded();
    partial void OnValidate(System.Data.Linq.ChangeAction action);
    partial void OnCreated();
    partial void OnIdChanging(int value);
    partial void OnIdChanged();
    partial void OnNomChanging(string value);
    partial void OnNomChanged();
    partial void OnDescriptionChanging(string value);
    partial void OnDescriptionChanged();
    #endregion
		
		public TypeAntecedent()
		{
			this.Initialize();
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Id", AutoSync=AutoSync.OnInsert, DbType="Int NOT NULL IDENTITY", IsPrimaryKey=true, IsDbGenerated=true)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=1)]
		public int Id
		{
			get
			{
				return this._Id;
			}
			set
			{
				if ((this._Id != value))
				{
					this.OnIdChanging(value);
					this.SendPropertyChanging();
					this._Id = value;
					this.SendPropertyChanged("Id");
					this.OnIdChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Nom", DbType="VarChar(50) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=2)]
		public string Nom
		{
			get
			{
				return this._Nom;
			}
			set
			{
				if ((this._Nom != value))
				{
					this.OnNomChanging(value);
					this.SendPropertyChanging();
					this._Nom = value;
					this.SendPropertyChanged("Nom");
					this.OnNomChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.ColumnAttribute(Storage="_Description", DbType="VarChar(150) NOT NULL", CanBeNull=false)]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=3)]
		public string Description
		{
			get
			{
				return this._Description;
			}
			set
			{
				if ((this._Description != value))
				{
					this.OnDescriptionChanging(value);
					this.SendPropertyChanging();
					this._Description = value;
					this.SendPropertyChanged("Description");
					this.OnDescriptionChanged();
				}
			}
		}
		
		[global::System.Data.Linq.Mapping.AssociationAttribute(Name="TypesAntecedent_Antecedent", Storage="_Antecedents", ThisKey="Id", OtherKey="TypeAntecedentId")]
		[global::System.Runtime.Serialization.DataMemberAttribute(Order=4, EmitDefaultValue=false)]
		public EntitySet<Antecedent> Antecedents
		{
			get
			{
				if ((this.serializing 
							&& (this._Antecedents.HasLoadedOrAssignedValues == false)))
				{
					return null;
				}
				return this._Antecedents;
			}
			set
			{
				this._Antecedents.Assign(value);
			}
		}
		
		public event PropertyChangingEventHandler PropertyChanging;
		
		public event PropertyChangedEventHandler PropertyChanged;
		
		protected virtual void SendPropertyChanging()
		{
			if ((this.PropertyChanging != null))
			{
				this.PropertyChanging(this, emptyChangingEventArgs);
			}
		}
		
		protected virtual void SendPropertyChanged(String propertyName)
		{
			if ((this.PropertyChanged != null))
			{
				this.PropertyChanged(this, new PropertyChangedEventArgs(propertyName));
			}
		}
		
		private void attach_Antecedents(Antecedent entity)
		{
			this.SendPropertyChanging();
			entity.TypeAntecedent = this;
		}
		
		private void detach_Antecedents(Antecedent entity)
		{
			this.SendPropertyChanging();
			entity.TypeAntecedent = null;
		}
		
		private void Initialize()
		{
			this._Antecedents = new EntitySet<Antecedent>(new Action<Antecedent>(this.attach_Antecedents), new Action<Antecedent>(this.detach_Antecedents));
			OnCreated();
		}
		
		[global::System.Runtime.Serialization.OnDeserializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnDeserializing(StreamingContext context)
		{
			this.Initialize();
		}
		
		[global::System.Runtime.Serialization.OnSerializingAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerializing(StreamingContext context)
		{
			this.serializing = true;
		}
		
		[global::System.Runtime.Serialization.OnSerializedAttribute()]
		[global::System.ComponentModel.EditorBrowsableAttribute(EditorBrowsableState.Never)]
		public void OnSerialized(StreamingContext context)
		{
			this.serializing = false;
		}
	}
}
#pragma warning restore 1591
